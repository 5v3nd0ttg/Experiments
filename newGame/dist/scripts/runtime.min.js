var Easel;(function(a){W=window;D=document;M=Math;C=D.createElement("canvas");ctx=C.getContext("2d");$=function(c){return D.getElementById(c)};q=function(){C.width=v.w;C.height=v.h};u=function(){ctx=C.getContext("2d")};w=function(){d=W;b="inner";if(!(d.innerWidth)){b="client";d=D.documentElement||D.body}return{w:d[b+"Width"],h:d[b+"Height"]}};v=w();a.background="#000";a.redraw=function(){ctx.fillStyle=a.background;ctx.fillRect(0,0,v.w,v.h)};W.r=function(f,g,e){f=!g?0*(g=f):f>g?g+(d=f)-g:f;e=e||0;g=M.random()*(g-f)+f;return e?g|0:g};W.onresize=function(){W.v=w();q();a.redraw()};D.body.appendChild(C);d=document.createElement("style");d.type="text/css";d.rel="stylesheet";d.innerHTML="body{background-color:"+a.background+";overflow:hidden;margin:0;}.canvas{position:absolute;left:0;top:0;width:"+v.w+"px;height:"+v.h+"px;}";D.getElementsByTagName("head")[0].appendChild(d);q()})(Easel||(Easel={}));
/**********************************************************************************\
 Ion.js performs tweening movements and operations on particles and was created
 to use in conjunction with Easel.js
 Copyright (C) 2014 Nathaniel Inman

 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 \*********************************************************************************/
var Ion=function(q,s,x,y,dx,dy){
  this.particle=[];
  this.clear=true;
  this.quantity=q||1;
  this.sx=x||0;
  this.sy=y||0;
  this.dx=dx||1;
  this.dy=dy||1;
  this.wx=0;
  this.wy=0;
  this.m=0; //modulation factor - only runs if it's set explicitly
  this.color='#48F';
  this.clearColor='#000';
  this.retain=null; //this can be set as a function for a draw after clear screen
  this.size=s||1;
  this.tween_type=0;
  this.tween_current=0;
  this.tween_duration=1000;
  this.tween_speed=1;
};

/**
 * Ease is a tweening function using Robert Penner's equations to identify the
 * values of an axis in respect to it's start location, destination, and the normalization
 * of the transition between the two with respect to starting time, a given duration, and the
 * function to impose upon the transition from that start position to it's destination.
 *
 * @param  {float}   b    Beginning value of the property
 * @param  {float}   c    Change between the beginning and destination value of the property
 * @param  {integer} t    Current time or position of the tween
 * @param  {integer} d    total time of the tween
 * @param  {float}   o    modification orientation strength
 * @param  {integer} type specifies the tweening type
 * @return {float}        current x or y location
 */
Ion.prototype.ease=function ease(b,c,t,d,o,type){
  type=type|0; //force integer in the case float is passed
  if(type===0){ //linear
    return c*t/d+b;
  }else if(type==1){ //ease-in quad
    return c*(t/=d)*t+b;
  }else if(type==2){ //ease-out quad
    return -c*(t/=d)*(t-2)+b;
  }else if(type==3){ //ease-in-out quad
    return (t/=d/2)<1?c/2*t*t+b:-c/2*((--t)*(t-2)-1)+b;
  }else if(type==4){ //ease-in cubic
    return c*(t/=d)*t*t+b;
  }else if(type==5){ //ease-out cubic
    return c*((t=t/d-1)*t*t+1)+b;
  }else if(type==6){ //ease-in-out cubic
    return ((t/=d/2)<1)?c/2*t*t*t+b:c/2*((t-=2)*t*t+2)+b;
  }else if(type==7){ //ease-in quart
    return c*(t/=d)*t*t*t+b;
  }else if(type==8){ //ease-out quart
    return -c*((t=t/d-1)*t*t*t-1)+b;
  }else if(type==9){ //ease-in-out quart
    return ((t/=d/2)<1)?c/2*t*t*t*t+b:-c/2*((t-=2)*t*t*t-2)+b;
  }else if(type==10){ //ease-in quint
    return c*(t/=d)*t*t*t*t+b;
  }else if(type==11){ //ease-out quint
    return c*((t=t/d-1)*t*t*t*t+1)+b;
  }else if(type==12){ //ease-in-out quint
    return ((t/=d/2)<1)?c/2*t*t*t*t*t+b:c/2*((t-=2)*t*t*t*t+2)+b;
  }else if(type==13){ //ease-in sine
    return -c*Math.cos(t/d*(Math.PI/2))+c+b;
  }else if(type==14){ //ease-out sine
    return -c/2*(Math.cos(Math.PI*t/d)-1)+b;
  }else if(type==15){ //ease-in exponential
    return (t===0)?b:c*Math.pow(2,10*(t/d-1))+b;
  }else if(type==16){ //ease-out exponential
    return (t==d)?b+c:c*(-Math.pow(2,-10*t/d)+1)+b;
  }else if(type==17){ //ease-in-out exponential
    return (t===0)?b:((t==d)?b+c:(((t/=d/2)<1)?c/2*Math.pow(2,10*(t-1))+b:(c/2*(-Math.pow(2,-10*--t)+2)+b)));
  }else if(type==18){ //ease-in circular
    return -c*(Math.sqrt(1-(t/=d)*t)-1)+b;
  }else if(type==19){ //ease-out circular
    return c*Math.sqrt(1-(t=t/d-1)*t)+b;
  }else if(type==20){ //ease-in-out circular
    return ((t/=d/2)<1)?-c/2*(Math.sqrt(1-t*t)-1)+b:c/2*(Math.sqrt(1-(t-=2)*t)+1)+b;
  }else if(type==21){ //ease-in elastic loose
    return ease(this,b,c,t,d,0.5,22);
  }else if(type==22){ //ease-in elastic normal
    return (function(){
      var s=1.70158,p=0,a=c;
      if (t===0) return b;
      if ((t/=d)==1) return b+c;
      if (!p) p=d*o;
      if (a < Math.abs(c+0.1)) { a=c;s=p/4; }
      else s = p/(2*Math.PI) * Math.asin (c/a);
      return -(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )) + b;
    })();
  }else if(type==23){ //ease-in elastic strong
    return ease(b,c,t,d,0.1,22);
  }else if(type==24){ //ease-out elastic loose
    return ease(b,c,t,d,0.5,25);
  }else if(type==25){ //ease-out elastic normal
    return (function(){
      var s=1.70158,p=0,a=c;
      if (t===0) return b;
      if ((t/=d)==1) return b+c;
      if (!p) p=d*o;
      if (a < Math.abs(c+0.1)) { a=c;s=p/4; }
      else s = p/(2*Math.PI) * Math.asin (c/a);
      return a*Math.pow(2,-10*t) * Math.sin( (t*d-s)*(2*Math.PI)/p ) + c + b;
    })();
  }else if(type==26){ //ease-out elastic strong
    return ease(b,c,t,d,0.1,25);
  }else if(type==27){ //ease-in-out elastic loose
    return ease(b,c,t,d,0.5,28);
  }else if(type==28){ //ease-in-out elastic normal
    return (function(){
      var s=1.70158,p=0,a=c;
      if (t===0) return b;
      if ((t/=d/2)==2) return b+c;
      if (!p) p=d*(o*1.5);
      if (a < Math.abs(c+0.1)) { a=c;s=p/4; }
      else s = p/(2*Math.PI) * Math.asin (c/a);
      if (t < 1) return -0.5*(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )) + b;
      return a*Math.pow(2,-10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )*0.5 + c + b;
    })();
  }else if(type==29){ //ease-in-out elastic strong(b,c,t,d,o,type)
    return ease(b,c,t,d,0.1,28);
  }else if(type==30){ //ease-in back
    return c*(t/=d)*t*((1.70158+1)*t - 1.70158) + b;
  }else if(type==31){ //ease-out back
    return c*((t=t/d-1)*t*((1.70158+1)*t + 1.70158) + 1) + b;
  }else if(type==32){ //ease-in-out back
    var s=1.70158;
    return ((t/=d/2) < 1)?c/2*(t*t*(((s*=(1.525))+1)*t - s)) + b:c/2*((t-=2)*t*(((s*=(1.525))+1)*t + s) + 2) + b;
  }else if(type==33){ //ease-in bounce
    return c-ease(0,c,d-t,d,0,34)+b;
  }else if(type==34){ //ease-out bounce
    if ((t/=d) < (1/2.75)) {
      return c*(7.5625*t*t) + b;
    } else if (t < (2/2.75)) {
      return c*(7.5625*(t-=(1.5/2.75))*t + 0.75) + b;
    } else if (t < (2.5/2.75)) {
      return c*(7.5625*(t-=(2.25/2.75))*t + 0.9375) + b;
    } else {
      return c*(7.5625*(t-=(2.625/2.75))*t + 0.984375) + b;}
  }else if(type==35){ //ease-in-out bounce
    if(t<d/2){
      return ease(0,c,t*2,d,0,33)*0.5+b;
    }else{
      return ease(0,c,t*2-d,d,0,34)*0.5+c*0.5+b;
    } //end if
  }//end if
};

/**
 * getNew will create a new particle and return that result. It's possible to override the
 * function to develop a custom particle generator for more specific applications.
 *
 * @param  {Integer} atom Particle index
 * @return {Object}       The particle object is returned
 */
Ion.prototype.getNew=function(atom){
  this.onCreate(); //even fired as a new particle is created
  var sx=typeof this.sx=='function'?this.sx():this.sx;
  var sy=typeof this.sy=='function'?this.sy():this.sy;
  return {
    id:atom, //be able to reference each particle individually outside of the class
    sx:sx,
    sy:sy,
    x:sx,
    y:sy,
    dx:typeof this.dx            =='function'?this.dx():this.dx,
    dy:typeof this.dy            =='function'?this.dy():this.dy,
    c:typeof this.tween_current  =='function'?this.tween_current():this.tween_current,
    d:(typeof this.tween_duration =='function'?this.tween_duration():this.tween_duration)|0,
    tt:typeof this.tween_type    =='function'?this.tween_type():this.tween_type,
    s:typeof this.size           =='function'?this.size():this.size,
    wx:typeof this.wx            =='function'?this.wx():this.wx,
    wy:typeof this.wy            =='function'?this.wy():this.wy,
    image:this.image,
    imageWidth:this.imageWidth,
    imageHeight:this.imageHeight
  };
};

/**
 * Reset will perform a small number of operations to reset a particle back to a starting state
 * instead of actually generating a new particle. This can be helpful if you want to retain it's
 * current location or properties that have been computed thus far. It's further helpful because it
 * can be overridden to perform other operations post-completion of the particles duration.
 *
 * @param  {Integer} atom Particle index
 * @return {Void}         Function doesn't return a value
 */
Ion.prototype.reset=function(atom){
  this.particle[atom].x  =this.particle[atom].sx=(typeof this.sx=='function'?this.sx():this.sx);
  this.particle[atom].y  =this.particle[atom].sy=(typeof this.sy=='function'?this.sy():this.sy);
  this.particle[atom].dx =(typeof this.dx=='function'?this.dx():this.dx);
  this.particle[atom].dy =(typeof this.dy=='function'?this.dy():this.dy);
  this.particle[atom].c  =0;
};

/**
 * Populate pushes a new particle into the particles array then checks to see if the specified
 * particle number has been reached, if it hasn't, then it queues up itself asynchronously to
 * create another particle. This recursive action continues until the total particle quantity
 * is reached.
 *
 * @param wait Function passed that will return a integer in milliseconds to force population wait
 *             between ions
 * @return {Void} Function doesn't return a value
 */
Ion.prototype.populate=function(wait){
  var that=this;
  this.particle.push(this.getNew(this.particle.length));
  if(this.particle.length<this.quantity){
    setTimeout(function(){that.populate(wait);},typeof wait == 'function' ? wait() : 1);
  } //end if
};

/**
 * Wind applies noise values on the movement patterns of the particles instead of them performing
 * their tweening operations unhindered. This gives a more dynamic feel to their movement. The wind
 * patterns and function can be overridden to be dynamic or conditional as desired.
 *
 * @param  {Integer} atom Particle index
 * @return {Void}         Function doesn't return a value
 */
Ion.prototype.wind=function(atom){
  this.particle[atom].dx +=this.particle[atom].wx;
  this.particle[atom].dy +=this.particle[atom].wy;
  this.particle[atom].sx +=this.particle[atom].wx;
  this.particle[atom].sy +=this.particle[atom].wy;
};

/**
 * Draw simply draws a particle indicated by its index number
 *
 * @param  {Integer} atom Particle index
 * @return {Void}         Function doesn't return a value
 */
Ion.prototype.draw=function(atom){
  if(this.particle[atom].image){ //image was passed, use it instead of a pixel particle
    if(this.particle[atom].imageWidth && this.particle[atom].imageHeight){ //sizes given for constrain
      ctx.drawImage(this.particle[atom].image,this.particle[atom].x-this.particle[atom].imageWidth/2,this.particle[atom].y-this.particle[atom].imageHeight/2, this.particle[atom].imageWidth, this.particle[atom].imageHeight);
    }else{ //no sizes given, just allow it to fill with images normal size
      ctx.drawImage(this.particle[atom].image,this.particle[atom].x-this.particle[atom].imageWidth/2,this.particle[atom].y-this.particle[atom].imageHeight/2);
    } //end if
  }else{
    ctx.fillRect(this.particle[atom].x,this.particle[atom].y,this.particle[atom].s,this.particle[atom].s);
  } //end if
};

/**
 * This function exits early if it wasn't explicitly declared, otherwise it runs the function specified
 * and sends it the current atom, in the case that the function utilizes case-specific information. It also
 * sends the cx,cy,dx, and dy variables
 *
 * @param  {Integer} atom Particle index
 * @return {Void}         Function doesn't return a value
 */
Ion.prototype.modulate=function(atom){
  if(!(typeof this.m === 'function'))return;
  this.m(atom,this.particle[atom].x,this.particle[atom].y,this.particle[atom].dx,this.particle[atom].dy);
};

/**
 * OnCreate function is called when a particle is created for the first time. This allows one to keep track
 * of how far into the creation of all the particles one is given the particle total that they already control.
 *
 * @return {Void} Function doesn't return a value, but can be overriden to make a callback as desired
 */
Ion.prototype.onCreate=function(){};
/**
 * OnEnd function is called after a particle finishes its tweening motion. This is merely a template function
 * that is required to be overridden.
 *
 * @return {Void} Function doesn't return a value, but can be overridden to make a callback as desired
 */
Ion.prototype.onEnd=function(){};

/**
 * OnEscape function is called after a particle leaves the view space. This is merely a template function
 * that is required to be overridden.
 *
 * @return {Void} Function doesn't return a value, but can be overridden to make a callback as desired
 */
Ion.prototype.onEscape=function(){};

/**
 * Process is the automatic function that calls the getFrame main function and after updating, queues the next
 * update frame. It will also auto-clear. This function is mostly used for testing a single Ion instance. Most
 * mock-ups of Ion should be done using the getFrame function and manually resetting the canvas as needed
 *
 * @return {Void} Function doesn't return a value
 */
Ion.prototype.process=function(){
  var that=this;
  if(typeof this.clear == 'function'){ //override clear function, use it instead
    this.clear();
  } else if(this.clear){ //sent as some truthy value, likely boolean true
    ctx.fillStyle=this.clearColor;
    ctx.fillRect(0,0,v.w,v.h);
  } //end if
  if(this.clear && this.retain){
    this.retain(); //if there is a retaining script, run it
  } //end if
  this.getFrame(); //call getFrame() to receive and flip all pixel information for next update
  setTimeout(function(){that.process();},this.tween_speed);
};

/**
 * getFrame is the main function that performs operations on each particle. It immediately flips those variables
 * after they've been computed. There is no clearing of pixels, it superimposes onto what's already available on the screen
 * so any clearing will have to be done through the process function or manually.
 *
 * @return {Void} Function doesn't return a value
 */
Ion.prototype.getFrame=function(){
  ctx.fillStyle=this.color;
  for(atom in this.particle){
    p=this.particle[atom]; //reference to clean up code
    if(p.c==p.d)continue; //skip a done movement process
    this.wind(atom);
    this.draw(atom);
    this.modulate(atom);
    if(p.x<0||p.y<0||p.x>v.w||p.y>v.h)this.onEscape(atom);
    p.c++; //increment the current iteration of the tween by one
    if(p.c==p.d)this.onEnd(atom); //movement process finished
    if((p.x)|0!==(p.dx)|0)p.x=this.ease(p.sx,p.dx-p.sx,p.c,p.d,0.3,p.tt);
    if((p.y)|0!==(p.dy)|0)p.y=this.ease(p.sy,p.dy-p.sy,p.c,p.d,0.3,p.tt);
  } //end for
};
var _inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) subClass.__proto__ = superClass;
};

var _prototypeProperties = function (child, staticProps, instanceProps) {
  if (staticProps) Object.defineProperties(child, staticProps);
  if (instanceProps) Object.defineProperties(child.prototype, instanceProps);
};

var Database;
(function (Database) {
  /**
   * Class is a base class that all classes are built
   * upon. It contains generic functions that they all
   * use.
   */
  var Class = (function () {
    function Class() {}

    _prototypeProperties(Class, null, {
      getClass: {
        value: function getClass() {
          console.log("My class is " + this.name);
        },
        writable: true,
        enumerable: true,
        configurable: true
      },
      addAbility: {
        value: function addAbility(config) {
          var name = config.name || "error";
          var ability = this.abilities[name];
          this.name = name;
          this.levelReq = config.levelReq || 0;
          console.log("tried adding " + name);
        },
        writable: true,
        enumerable: true,
        configurable: true
      }
    });

    return Class;
  })();

  /**
   * Elementalist class extends the generic Class so it
   * inherits some of the basic functions that all classes
   * share. The Elementalist can be created given a
   * specialty to limit its skills down to a certain set
   * that they prefer. This is common for mobiles.
   */
  var Elementalist = (function (Class) {
    function Elementalist(specialty) {
      this.name = "Elementalist";
      this.abilities = {}; //start out with a blank slate
      if (!specialty || specialty == "fire") {} //end if
      if (!specialty || specialty == "water") {} //end if
      if (!specialty || specialty == "air") {} //end if
      if (!specialty || specialty == "earth") {} //end if
      if (!specialty || specialty == "spirit") {} //end if
      this.addAbility({ name: "super" });
    }

    _inherits(Elementalist, Class);

    _prototypeProperties(Elementalist, null, {
      castImmolation: {
        value: function castImmolation() {
          console.log("this is doing stuff");
        },
        writable: true,
        enumerable: true,
        configurable: true
      },
      ai: {
        value: function ai() {
          var result = [];
          if (r(0, 2, 1) === 0) {
            //50% to physical attack
            result.push(this.attack(target)); //return the result string
          } else {
            //50% to cast a spell instead
            if (!this.affects["elemental precision"]) {
              //always cast elemental precision before immolate spells
              result.push(this.cast("elemental precision", this));
            } else if (!this.affects["elemental amplitude"]) {
              //always cast elemental amplitude before immolate spells
              result.push(this.cast("elemental amplitude", this));
            } else {
              //elemental precision
              var randomVar = r(0, 3, 1);
              if (randomVar === 0) {
                //apply vicerating element
                return (function (type) {
                  type = 0;
                  if (type === 0) {
                    return this.cast("vicerating fire", target); //returns the result string / array of strings
                  } else if (type == 1) {
                    return this.cast("vicerating ice", target); //returns the result string / array of strings
                  } else if (type == 2) {
                    return this.cast("vicerating sparks", target); //returns the result string / array of strings
                  } else if (type == 3) {
                    return this.cast("vicerating pulses", target); //returns the result string / array of strings
                  } else if (type == 4) {
                    return this.cast("vicerating darkness", target); //returns the result string / array of strings
                  } //end if
                }).call(this, r(0, 5, 1));
              } else if (randomVar === 1) {
                //cast immolation
                return (function (type) {
                  type = 0;
                  if (type === 0) {
                    return this.cast("immolate fire", target); //returns the result string / array of strings
                  } else if (type == 1) {
                    return this.cast("immolate ice", target); //returns the result string / array of strings
                  } else if (type == 2) {
                    return this.cast("immolate sparks", target); //returns the result string / array of strings
                  } else if (type == 3) {
                    return this.cast("immolate pulses", target); //returns the result string / array of strings
                  } else if (type == 4) {
                    return this.cast("immolate darkness", target); //returns the result string / array of strings
                  } //end if
                }).call(this, r(0, 5, 1));
              } else {
                randomVar = r(1, 6, 1);
                if (randomVar == 1) {
                  return this.cast("fireball", target);
                } else if (randomVar == 2) {
                  return this.cast("frostcone", target);
                } else if (randomVar == 3) {
                  return this.cast("lightning ball", target);
                } else if (randomVar == 4) {
                  return this.cast("earthquake", target);
                } else if (randomVar == 5) {
                  return this.cast("plague", target);
                } //end if
              } //end if
            } //end if
          } //end if
          return result;
        },
        writable: true,
        enumerable: true,
        configurable: true
      }
    });

    return Elementalist;
  })(Class);

  var Creature = (function () {
    function Creature(num) {
      var creatures = Database.creatures;
      var type = num ? creatures[num] : creatures[r(0, creatures.length, 1)];
      this.level = 100;
      this.type = type;
      this.name = type.name;
      this.weight = type.weight;
      this.height = type.height;
      this.health = type.health;
      this.healthMax = type.health;
      this.damage = type.damage;
      this.symbol = type.symbol;
      this.resistance = { fire: 2 };
      this.amplitude = { fire: 1 };
      this.affects = {}; //no current affects
      this.description = type.description;
      this["class"] = new Elementalist();
      this.actions = {
        cur: 0,
        list: []
      };
    }

    _prototypeProperties(Creature, null, {
      cast: {
        value: function cast(name, target) {
          return this.spells[name].call({ actor: this, target: target, name: name });
        },
        writable: true,
        enumerable: true,
        configurable: true
      },
      attack: {
        value: function attack(target) {
          var result = [];
          var attackRoll = r(1, 101, 1);
          var damage = this.damage > 5 ? r(this.damage - 5, this.damage + 1, 1) : r(0, this.damage + 1, 1);
          if (attackRoll < 5) {
            //critical miss
            attackRoll = r(1, 101, 1);
            if (attackRoll >= 95) {
              this.health -= damage = (damage + 1) * 2;
              result.push(this.name + " strikes wildly and CRITICALLY damages itself for " + damage + " hp.");
            } else {
              this.health -= ++damage; //add 1 to ensure it always deals damage
              result.push(this.name + " strikes wildly and damages itself for " + damage + " hp.");
            } //end if
          } else if (attackRoll < 15) {
            //miss
            result.push(this.name + " misses " + target.name + ".");
          } else if (attackRoll >= 95) {
            //critical strike x2damage
            damage *= 2;
            target.health -= damage;
            result.push(this.name + " CRITICALLY attacks " + target.name + " for " + damage + " hp.");
          } else {
            if (damage === 0) {
              result.push(this.name + " weakly attacks " + target.name + " and deals no damage.");
            } else {
              target.health -= damage;
              result.push("|W|" + this.name + " |r|attacks|W| " + target.name + " for " + damage + " hp.");
            } //end if
          } //end if
          return result;
        },
        writable: true,
        enumerable: true,
        configurable: true
      },
      process: {
        value: function process() {
          // Start processing the mobiles actions by iterating through the effects that
          // they're currently under and applying them. If they die during this section
          // then their AI routines aren't executed
          if (this.health <= 0) return this.name + " hits the ground in a heap.";
          // Start by applying any affects the creature has on it before they decide to act
          for (var spell in this.affects) {
            // Run the script if it's an executable affect
            if (this.affects[spell].script) {
              //the affect has a script to run
              result.push(this.affects[spell].script.call({ actor: this, spell: spell }));
            } //end if
            // Decrement the timer for the affect or remove it if it expires
            if (this.affects[spell].timer > 0) {
              this.affects[spell].timer--; //decrement the timer on spells that don't last forever
            } else if (this.affects[spell].timer === 0) {
              delete this.affects[spell]; //remove the node from the object that has expired
            } //end if
          } //end for
          this["class"].ai(); //run the ai routines
        },
        writable: true,
        enumerable: true,
        configurable: true
      }
    });

    return Creature;
  })();

  Database.Creature = Creature; //give the Creature class to the Database
  var creatures = [{
    name: "Abada",
    weight: 175,
    height: 60,
    health: 40,
    damage: 5,
    symbol: "a",
    description: "Remarkably similar to the unicorn except they bear on their heads" + "two crooked horns instead of one straight horn. They are also thought " + "to be the size of a small donkey, have a dark bay color and have a " + "boar's tail. Like the unicorn, its horns are thought to act as an " + "antidote to poisons. It reportedly lives in the Tropics of Dummet " + "and is the lesser known variety of its cousin the unicorn."
  }, {
    name: "Abaddon",
    weight: 340,
    height: 120,
    health: 90,
    damage: 11,
    symbol: "A",
    description: "Abaddon literally translates from Narsik into destruction, ruin, " + "and perdition. This name is also used to refer to the palace of " + "Dekkashraen. Abaddon is described as the king of a group of locust-like " + "creatures with the faces of men, the hair of women, tails of scorpions, " + "teeth of lions, and wings that sound like the thunder of horses' hooves " + "charging into battle. He is the chief of the demons of the servant " + "hierarchy. Though there may be more than one Abaddon, they are only " + "talked about in myths and there are no accounts of them being seen, " + "though it's rumored they hail from deep within The Bleak."
  }, {
    name: "Adar llwch Gwin",
    weight: 250,
    height: 67,
    health: 40,
    damage: 7,
    symbol: "l",
    description: "Huge magical birds that can understand human speech and obey all commands " + "given to them by their master. An Adar Llwch Gwin looks similar to a " + "griffin. An Adar generally sticks to where it was born so they haven't " + "moved far from the Amari Hinterlands, though some have bee rumored to " + "roam Lythantos' Shrine."
  }, {
    name: "Adlet",
    weight: 90,
    height: 40,
    health: 30,
    damage: 3.2,
    symbol: "d",
    description: "A bloodthirsty, cannibalistic race of canine like hominids said to be " + "the offspring of a Karthaginian womans unnatural mating with a ferocious " + "giant red dog. Adlets roam the Frozen Wastes as scavengers. An Adlet can " + "weigh from 60 stones to 190 stones depending on whether it has eaten " + "recently. Adlets stand 40 stones tall."
  }, {
    name: "Addonexus",
    weight: 270,
    height: 50,
    health: 75,
    damage: 8,
    symbol: "D",
    description: "An Addonexus is a large white canine. They use pure energy which causes " + "them to be able to control the elements and heal physical wounds. They age " + "approximately 3 years slow than normal humans however, and are only capable " + "of living 75 years at most. Addonexus were born during the War of Souls. " + "It's said they will die the day the Everspark is put back together as the " + "wandering energy of the Everspark is said to encompass their souls. " + "Addonexus have been spotted all throughout Sedia though they are normally " + "seen within caves or among Adlets with whom they becom packleaders. An " + "Addonexus is generally 2 to 270 stones in weight and needs little sustenance " + "to live efficiently. An addonexus generally stands 50 stones tall."
  }, {
    name: "Afanc",
    weight: 30,
    height: 20,
    health: 25,
    damage: 2,
    symbol: "f",
    description: "An Afanc is a creature from elven folklore that lives in lakes. It's description " + "differs highly, ranigng from dwarf, beaver, crocodile, and is sometimes said " + "to be a demon, but it is most favourably depicted as a large frog with claws " + "on all ilimbs. The Afanc is sometimes said to have magical powers and even the " + "ability to speak draconian. In one tale it uses these powers to turn its " + "thrashing of the lake into the mythical deluge that appears in many mythologies. " + "Afanc have been rumored to reign from within the moran wetlands as well as Fae " + "Lake within Mellowdeep Marsh. An afanc weighs 30 stones and stands 20 stones tall."
  }, {
    name: "Agloolik",
    weight: 1,
    height: 60,
    health: 35,
    damage: 2,
    symbol: "g",
    description: "A good spirit of the Doonan elk. A benevolent spirit in Doonan mythology, it lived under the ice and helped hunters and fishermen. Agloolik lives about the Frozen Waste and because it is a spirit, it doesn't weigh anything. It's rumored the Agloolik would stand the height of a man if upright, but is always depicted sitting down within water, curled up in a ball."
  }, {
    name: "Agta",
    weight: 210,
    height: 80,
    health: 70,
    damage: 7,
    symbol: "G",
    description: "An Agta is a tree demon but with more human characteristics. It is described as being in between 70 to 90 stones tall, brown, and a hairy male with a beard. Agta are normally described as smoking a big tobacco pipe, whose strong smell would attract human attention. The Agta is supposed to hold a magical white stone, a little smaller in size than a quail egg. Should any person happen to obtain this stone, the Agta would grant wishes. Agta are not necessarily considered to be evil. Agta may make contact with people to offer friendship, or if it is attracted to a woman. If an Agta befriends any human, especially because of love, the Agta will consistently follow its 'love interest' throughout life. Agta are also said to play pranks on people, frequently making travelers become disoriented and lose their way in the mountains or in the woods. Agta hail within all woodland areas and are often mistaken for dryads. Agta are generally 210 stones in weight."
  }, {
    name: "Alerion",
    weight: 40,
    height: 30,
    health: 80,
    damage: 3,
    symbol: "r",
    description: "An alerion lives near humid dry places. Alerions are large eagle-like birds who have children only once every 60 years. Alerions have a wide wing span and are rarely seen as they fly very high in the sky and land but once each day. Alerion stands approximately 30 stones tall and weighs but 30-40 stones."
  }, {
    name: "Ahuizhotl",
    weight: 80,
    height: 30,
    health: 90,
    damage: 4,
    symbol: "z",
    description: "Meaning 'water oppossum', also called 'sun dog', the ahuizotl is a vicious and savage predator. It resembles a medium-sized dog with a monkey's paws and human hand at the end of its tail. The creature has also been described as otter-like creature with five hands, on on its tail, capable of manipulation. The Ahuizotl was a feared creature supposed to live in or near water. It drags people and fishermen under the water using the hand on his tail. Its said to only eat travelers eyes, teeth and nails. Ahuizhotl stand approximately 30 stones tall and weigh 60 to 110 stones."
  }, {
    name: "Akki",
    weight: 230,
    height: 130,
    health: 100,
    damage: 9,
    symbol: "k",
    description: "Hideous, gigantic, creatures with sharp claws, wild hair, and two long horns growing from their eads, akki are fierce. They are humanoid for the most part, but occasionally they are shown with unnatural features such as odd numbers of eyes or extra fingers and toes. Their skin may be any number of colours, but red and blue are particularly common. Akki are often depicted as glutinous, lustful and ill-tempered though easily distracted by crude humour. Akki are 130 stones tall and weigh 230 to 280 stones."
  }, {
    name: "Alphyn",
    weight: 80,
    height: 40,
    health: 95,
    damage: 4,
    symbol: "p",
    description: "Alphyn are wonderful wolf creatures featured in heraldry. Alphyn sport a dragon's scaly underbelly and forelimbs, a long knotted tail, large pointed ears and a thin, pointed tongue. Alphyns are not winged and cannot fly, but it's said that they might be able to breath fire much like a dragon. Alphyn are 80 to 120 stones, and stand 40 stones tall."
  }, {
    name: "Amphisbaena",
    weight: 15,
    height: 50,
    health: 15,
    damage: 2,
    symbol: "P",
    description: "Amphisbaena are said to be winged snakes with a main head, a secondary head on its tail. Amphisbaena feed on the rotting dead and most generally inhabit crypts or old ruins. Amphisbaena prefer very hot climates that resemble barens or deserts - thoguht it cannot stray too far from the dead corpses as its required to feed quite often. Amphisbaena weigh approximately 15 stones and span from 30 to 60 stones in length."
  }, {
    name: "Amphithere",
    weight: 100,
    height: 70,
    health: 40,
    damage: 4,
    symbol: "m",
    description: "Amphitheres are passive beasts with a serpentine body and feathered wings. They kill by strangulation with their tails or burning with their breath. Amphitere's gaze are said to be hypnotic, so observers must avert their gaze from their eyes. They inpire fear in those who see them, but are in fact, rather poor fighters. Amphitheres stand 70 stones tall and weigh approximately 100 to 120 stones."
  }, {
    name: "Ankou",
    weight: 180,
    height: 80,
    health: 45,
    symbol: "K",
    description: "Ankous are seen as a death omen, and are said to collect the souls of the dead. They appear taller than they are, usually 80 stones tall, and are haggard figures with long white hair and a revolting head that can see everything in each direction. Upon arrival to collect a soul, the Ankou is said to make a mournful wail much like the sound of a banshee. Ankou's weigh around 180 stones."
  }, {
    name: "Aspis",
    weight: 250,
    height: 90,
    health: 85,
    damage: 9,
    symbol: "s",
    description: "A winged drake, said to have carried a carbuncle stone on its head. Aspis are incredibly gentle drakes that live on the sides of southern cliffs and feed on the birds and gulls that fly the breaches nearby. Aspis' are long-lived creatures who live in small packs of families. They are sometimes timid and don't fare well to being coerced. They have long claws at the end of their wings they use during battle and a long mandible much like a teradactyl. Aspis weigh 200 to 300 stones and stand 80 to 90 stones tall."
  }, {
    name: "Asrai",
    weight: 30,
    height: 50,
    health: 55,
    damage: 3,
    symbol: "S",
    description: "Asrai are very beautiful and appear to never age, living usually up to a hundered years old. Asrai are aquatic faeries that can appear to have webbed feet or hands. If sunlight touches them, they are said to die and turn into a puddle of water. Asrai are 30 stones in weight, and 50 stones tall."
  }, {
    name: "Aswang",
    weight: 30,
    height: 30,
    health: 30,
    damage: 2,
    symbol: "w",
    description: "Aswang are ghouls that feed on young children or unborn babies. They appear as regular townsmen by day and prefer an occupation related to meat such as butchery. During the night they transofrm from human into an animal. Aswang can disguise themselves as pigs, dogs, or black birds. Supposedly if a person looks at them in the eyes, the reflection should appear inverted. During their nocturnal activities, they walk with their feet facing backwardes and toenails reversed."
  }, {
    name: "Bai Ze",
    weight: 40,
    height: 40,
    health: 40,
    damage: 2,
    symbol: "z",
    description: "Bai Ze were worshipped as guardian spirits for herbal medicine in the old age, before the war of souls. They look much like large white lions and can have extra eyes on their face or back. Bai Ze are usually considered to be quite intelligent and well-read creatures. Bai Ze are mostly now hid in seclusion within the Bleak as they have grown frail over thousands of years. Bai Ze weigh merely 30 to 50 stones and stand 60 stones tall. They are not guardian spirits, but merely sub-earth elementals."
  }, {
    name: "Balam",
    weight: 180,
    height: 30,
    health: 65,
    damage: 6,
    symbol: "b",
    description: "Balam are supernatural jaguars that guard nature and protect villagers of certain distinguishable areas found sacred. Balam are only whispered legend - possibly as those who have seen them haven't survived. Balam were told to be 30 stones tall and weigh 180 stones. Such areas they might protect might be within the Forest of Frost or within the Old Kingdom."
  }, {
    name: "Balrog",
    weight: 3500,
    height: 175,
    health: 100,
    damage: 20,
    symbol: "B",
    description: "Balrogs are tall and thick giants with the ability to shroud themselves within fire or darkness. They prefer to use whips as their weapon of choice and are slavdrivers to Narsinian frontline war-ranks against Mandak's Legion. it's said that only dragons or even wyrms equal their ferocity and danger. Balrogs inhabit a clear 3000 to 4000 stones and stand 150 to 180 stones tall."
  }, {
    name: "Banshee",
    weight: 170,
    height: 55,
    health: 75,
    damage: 6,
    symbol: "e",
    description: "Banshees are rarely seen but it's told they are omens of death, a warning to certain families that their time has come. Her mourning call is often given at night when someone is about to die. Banshees are siad to resemble bats and humans alike weighing approximately 170 stones and standing 50 to 60 stones tall."
  }, {
    name: "Barbegazi",
    weight: 30,
    height: 30,
    health: 40,
    damage: 2,
    symbol: "R",
    description: "Barbegazis are a type of gnome tha tcan be found at the tops of frozen mountains. They are rarely seen, these creatures enjoy helping each other and set subtle warnings of trespassers. It's common to see Barbegazi form as groups against trespassers to more quickly dispatch an enemy that they find formidable. Barbegazi's are the height of quicklings and weigh no more than 30 stones."
  }, {
    name: "Barghest",
    weight: 80,
    height: 30,
    health: 70,
    damage: 4,
    symbol: "B",
    description: "Barghest are dangerous black dogs with huge teeth and claws. The name barghest was attributed from ghosts or bear spirits as it was often said a barghest helepd transport the souls of mad men to the heart of Kyros where Dekkashraen manufactures their souls into the shape of a new barghest: dangerous, swift and feared. A barghest directly resembles a large wolf in weight and hegight 80 stones, and 20 to 30 stones respectfully."
  }, {
    name: "Basilisk",
    weight: 330,
    height: 120,
    health: 30,
    damage: 10,
    symbol: "i",
    description: "Basilisks are said to have the power to cause death by simply peering into it's enemies eyes. It has the tail of a snake, the head of a rooster, and small wings that it can't use to fly. Basilisks have thick and resilient scales that protects their bodies from attack - predominately from their ancient predator, the Crok. Basilisks weigh 252 to 330 stones and span 120 stones in length."
  }, {
    name: "Bastet",
    weight: 80,
    height: 20,
    health: 70,
    damage: 3,
    symbol: "t",
    description: "Bastet are warecats or halfhuman, halfcat. Bastet hide in the wild and are rebuked by humans and elves as deformities of nature. Bastets are angry beings who have rarely been seenshowing sympathy to travelers, and similarly kill each other like animals fighting for territory. It is surprising that they still exist today given their shortage of brood and seldom breeding. Bastet weigh approximately 80 stones and stand 20 to 30 stones tall."
  }, {
    name: "Baykok",
    weight: 50,
    height: 50,
    health: 40,
    damage: 3,
    symbol: "y",
    description: "Baykoks are walking skeletons but with a thin translucent skin and fearsome red eyes glowing from sockets within their skull. Baykoks prey on warriors and prefers clubs or ethereal bow and arrows. Baykok aren't necessarily considered skeletal as they are controled by living organisms. They are complex beings that weigh no more than 50 stones and stand 50 to 60 stones tall."
  }, {
    name: "Black Annis",
    weight: 80,
    height: 80,
    health: 80,
    damage: 5,
    symbol: "N",
    description: "Black annis were once thought to be a boogyman story told to ornery children to scare good into them. Black annis are very real however, and live mostly in the swamps and marshes of Sedia as dark crones with iron claws for hands by which they use to hunt small children. They prefer humans but will settle for halflings or the occasional elf child. Black annis resemble the weight and height of a standard human."
  }, {
    name: "Blurr",
    weight: 150,
    height: 60,
    health: 120,
    damage: 7,
    symbol: "R",
    description: "Blurrs are vague human-like figures that are often seen randomly near sides of trees. They emit a frequency of sound that interferes with sentient creatures perception and makes beings forget or not notice blurrs are there. Though hard to notice, these creatures are incredibly deadly beings that emplore intense magical energies and skills used before the fall of the Old Kingdom. Blurrs are 150 to 180 stones in weight, and 60 to 70 stones tall."
  }, {
    name: "Bunyip",
    weight: 50,
    height: 30,
    health: 25,
    damage: 2,
    symbol: "Y",
    description: "Bunyips tend to lurk in swamps, billabongs, creeks, riverbeds or waterholes. Bunyips are considered water spirits and tend to resemble fish with legs with body characteristics of a squid and suckers on the palms of its feet. They are roughly teh size of a dog and weigh no more than 50 stones. Bunyips prey on weakened or disabled small creatures and are otherwise incredibly passive."
  }, {
    name: "Caladrius",
    weight: 8,
    height: 3,
    health: 50,
    damage: 1,
    symbol: "c",
    description: "Caladrius are said to be snow-white birds who can tell when someone is on the verge of death. They are said to swoop down and emerse the target with magical curing energies, feeding on the sickness only. They are thought as wings of Ettphemone and are highly sought after, sometimes sold for truckloads of Sovern to kings or queens. Caladrius weigh no more than 2 to 3 stones and stand 5 to 8 stones tall."
  }, {
    name: "Calygrehound",
    weight: 120,
    height: 30,
    health: 30,
    damage: 4,
    symbol: "C",
    description: "The calygreyhound is most commonly shown with teh head of a wildcat, body of a deer, forelegs of an eagle, and hinde legs of an ox. Calygreyhounds are fast and passive creatures that are seen in the Southeastern location of the Old Kingdom. Calygreyhounds are 80 to 120 stones and stand 30 stones tall."
  }, {
    name: "Campacti",
    weight: 400,
    height: 200,
    health: 100,
    damage: 14,
    symbol: "P",
    description: "Compacti are daemons, vast dragons whose bodies were slain to release earth and sinew. Campacti inhabit the deeps of the water and look most similarly to crocodiles. Campacti are 300 to 400 stones and range from 120 to 200 stones in height and width."
  }, {
    name: "Canaima",
    weight: 300,
    height: 200,
    health: 100,
    damage: 12,
    symbol: "M",
    description: "Canaima was a pagan god that was said to have the ability to change form or shape into whatever he possessed. In actuality Canaima are shapeshifting creatures that prefer to disguise themselves as humans unless the need to flee takes course and they shift as is necessary to perform actions. Canaimas weight depend on their form, as does their height. They are rarely found anywhere but within the wilds of forests."
  }, {
    name: "Catoblepas",
    weight: 600,
    height: 40,
    health: 400,
    damage: 20,
    symbol: "o",
    description: "Catoblepas are said to have the body of a buffalo and the head of a hog. The back is composed of scales that protect the creature, and it's head due to it's weight is always pointed downward. It's said that it's stare instills fear into it's enemies. Catoblepas are passive-aggresive creatures that tend to prefer plants and grass for food but will kill other animals to play with their corpse. A Catoblepas weighs about 300 to 600 stones and stands 40 stones tall."
  }, {
    name: "Centaur",
    weight: 275,
    height: 70,
    health: 80,
    damage: 9,
    symbol: "e",
    description: "Centaurs are creatures that have the head, torso, and arms of  a man while having the body and legs of a horse. Centaurs are said to be extremely heavy drinkers. They carry bows and are very short tempered creatures. Centaurs weigh 224 to 275 stones and stand generally at 70 stones tall."
  }, {
    name: "Cerastes",
    weight: 70,
    height: 70,
    health: 80,
    damage: 4,
    symbol: "R",
    description: "A Cerastes is a serpent-like imp with four small pairs of horns that resemble a ram. A cerastes hides within sand of deserts with it's horns protruding to deceive animals into think it's food. A Cerastes stands no more than 30 stones tall and weighs 50 to 70 stones."
  }, {
    name: "Cerberus",
    weight: 800,
    height: 120,
    health: 60,
    damage: 20,
    symbol: "C",
    description: "Cerberus is most commonly depicted as a giant dog with three heads, and sometimes a mane composed of snakes or tails of a serpent. The cerberus is regarded as a great and fearsome creature and emplores much strength. Cerberus is found only within the Bleak and is said to range from 250 to 800 stones and stand 80 to 120 stones tall."
  }, {
    name: "Charybdis",
    weight: 1800,
    height: 800,
    health: 100,
    damage: 20,
    symbol: "Y",
    description: "Charybdis is a creature that sits under the water and causes whirlpools by opening her gaping mouth and sucking in and swallowing everything, including ships and sea animals. When she exhales, she spits everything out. It is unknown what this colossal creature looks like."
  }, {
    name: "Chimaera",
    weight: 450,
    height: 80,
    health: 15,
    damage: 11,
    symbol: "m",
    description: "Chimaera's are part lion, goat, and snake. Chimaera's are the second most popular beast to guard portals, next to dragons. They are all females and mate solely with dragons. With the decline of dragons came the decline of Chimaeras. A chimaera stands 80 stones tall and weighes roughly 450 stones."
  }, {
    name: "Cinnamologus",
    weight: 180,
    height: 80,
    health: 10,
    damage: 5,
    symbol: "o",
    description: "A Cinnamologus is a giant bird who is said to collect and nest among cinnamon trees. This cinnamon bird is incredbly passive and cares only to eat the leaves of it's tree whilst planting more and protecting it's young. The only time a Cinnamologus will fight if it's cornered or protecting young. A Cinnamologus resembles a phoenix with the aura of ice instead of fire and does not rise from ashes, but instead lives centuries. Cinnamologus is just shy of a Rocs size and sizes may vary depending on the availability of cinnamon trees and the age of the bird."
  }, {
    name: "Clurichaun",
    weight: 80,
    height: 30,
    health: 5,
    damage: 2,
    symbol: "u",
    description: "Clurichuans are mischievous imps who have drinking problems. They dwell mostly within Narsis and have hobbies that consist of thievary or murder, by which they do without any honor whatsoever, killing enemies during their sleep. Clurichuans aren't incredibly strong and are considered creatures due to their incredibly low intelligence and inability to communicate. Clurichuans stand 20-30 stones and weigh between 20 and 80 stones depending on the availability of liquor and food."
  }, {
    name: "Cyclops",
    weight: 700,
    height: 150,
    health: 20,
    damage: 17,
    symbol: "c",
    description: "Cyclops are members of a primordial race. Cyclopes are giants with a single eye in the middle of their forehead and a foul disposition. The first cyclopes were smiths who worked underground. It's said that dwarves are the result of cyclops preference to underground work, growing small in size to fit their preferred setting. Cyclops are 600 to 700 stones and stand 120 to 150 stones tall."
  }, {
    name: "Dip",
    weight: 150,
    height: 30,
    health: 15,
    damage: 4,
    symbol: "o",
    description: "With a resemblance to death dogs, a dip is said to be an evil, black, hairy dog that is an emissary of Dekkashraen. It's said Dips suck peoples blood for sustenance and play with their dead bodies, leaving them about it's lair to ward off intruders. Dips are 50 to 150 stones and stand 30 stones tall."
  }, {
    name: "Dobhar-chu",
    weight: 70,
    height: 40,
    health: 30,
    damage: 3,
    symbol: "h",
    description: "Dobhar-chu's are cryptids that resemble either an otter or a serpentine creature. It's generally described as having fur with some form of protective properties. Their colors can range from white to brown or black. Dobhar-chu's reside in lakes but have the capability of walking on land and running fast. Dobhar-chu's have been known not to hesitate in attacking creature, human or not, who trespass in their area. They weigh 70 stones and stand 30 to 40 stones tall."
  }, {
    name: "Doppelganger",
    weight: 80,
    height: 50,
    health: 20,
    damage: 3,
    symbol: "p",
    description: "A doppelganger shapeshifts only into sentient beings and cannot communicate. It's said that doppelgangers are mirror images so that if their enemy is right handed they would effectively be left handed. Doppelgangers are incredibly rare and usually never noticed as they swiftly kill their prey and pretend to be them after death. Because of their inability to communicate they can't efficiently pretend to be their prey for too long and quickly move on to another prey. They assume whatever weight and height their prey inhibits."
  }, {
    name: "Dullahan",
    weight: 40,
    height: 30,
    health: 25,
    damage: 2,
    symbol: "D",
    description: "A dullahan is a malevolent sprite without a head quite simply. They prefer to use whips during combat and are considered creatures as their intelligence is quite lacking. Naturally because dullahans resemble sprites they are generally 20 to 30 stones tall and 30 to 40 stones in weight."
  }, {
    name: "Drake",
    weight: 400,
    height: 180,
    health: 95,
    damage: 14,
    symbol: "K",
    description: "Drakes are offspring of degenerate dragons and are frail and thin, though faster then their ancestors. Drakes are rarely seen but around Wyrms by whom they receive protection. Wyrms protect them as if they were their own young. Drakes are seen only within the Plains of Endless Despair. Drakes often weigh between 200 and 400 stones with a wingspan of 180 stones."
  }, {
    name: "Drekavac",
    weight: 20,
    height: 30,
    health: 35,
    damage: 2,
    symbol: "v",
    description: "Drekavac are creatures of the night and graveyard. It's said that they come from the souls of dead children. Some believe that Drekavacs can only be killed or laid to rest if their souls find peace. Drekavacs can change form from those of a bird, dog, fox, or a slender bodied baby with an out of proportion head. Features that remain constant for Drekavacs are it's height about 30 stones and it's horrifying screaming. For defense against the drekavac a dog must be obtained, for it's known that the drekavac are afraid of dogs. Drekavacs also hate the sunlight. They are generally 10 to 20 stones in weight."
  }, {
    name: "Dromedary",
    weight: 300,
    height: 50,
    health: 5,
    damage: 7,
    symbol: "m",
    description: "Dromedaries are extremely durable camels who never fall to fatigue. They are highly sought after by riders who fare the desert and barrens alike. Dromedaries are incredibly dependable and loving creatures but due to their lack of population it's incredibly rare to find a dromedary that isn't already domesticated. Dromedaries weigh 200 to 300 stones and stand 50 to 60 stones tall."
  }, {
    name: "Echeneis",
    weight: 15000,
    height: 1100,
    health: 100,
    damage: 20,
    symbol: "E",
    description: "Echeneis is a large legendary creature described in tall tales and yore that dates before the War of Souls. The stories tell of a fish 6 stones in length that is said to have latched onto ships, holding them back and slowing them down. The stories of Echeneis are told by ship captains in Dupree, Crecia, and other port cities. Echeneis would have weighed approximately 15000 stones."
  }, {
    name: "Faun",
    weight: 150,
    height: 60,
    health: 30,
    damage: 5,
    symbol: "f",
    description: "Fauns resemble satyrs except they fare well with other creatures, sentient and non-sentient alike. They attempt to win love of fair maidens. It's said if a Faun were to ever win the love of a maiden he would be transformed into a man, losing the legendary curse of the ill Satyr. Faun weigh 150 to 180 stones and stand 50 to 60 stones tall."
  }, {
    name: "Fei Lian",
    weight: 170,
    height: 30,
    health: 50,
    damage: 5,
    symbol: "F",
    description: "Fei lan have the body and legs of a stag and is are as swift as the wind. A long serpentine tail balances their heavy head as they resemble something of a sparrow with gleaming white bull horns and stripes. Fei Lian's elegant bodies are covered in golden fur and dark spots. These beasts are not carnivores, but would kill any creature that threatened them. Fei Lians weigh 150 to 170 stones and stand 30 to 40 stones tall."
  }, {
    name: "Fury",
    weight: 220,
    height: 60,
    health: 70,
    damage: 7,
    symbol: "F",
    description: "Furies are female cththonic deities of vengeance or supernatural personifications of the anger of the dead. They represent regeneration and the potency of creation, which both consumes and empowers. The perspective head of goddess Ettphemone is envisioned wreathed with serpents with the eyes dripping with blood. Sometimes they have the wings of a bat or bird and the body of a dog. Furies stand the height of a man from 50 to 60 stones tall and weigh 180 to 225 stones."
  }, {
    name: "Gashadokuro",
    weight: 250,
    height: 80,
    health: 80,
    damage: 8,
    symbol: "g",
    description: "Gashadokuro are giant skeletons many times taller than a human. It's thought that they are made of bones of people who have starved to death. After midnight the creatures walks streets making a ringing noise. Childrens stories say if you don't run away when the Gashadokuro approaches it will bite off their heads with it's giant teeth. Gashadokuro are actually quite agressive and weigh 225 to 250 stones, standing 70 to 80 stones tall."
  }, {
    name: "Grant",
    weight: 300,
    height: 50,
    health: 20,
    damage: 7,
    symbol: "n",
    description: "Grants are small horses that stand on their hind legs looking for possible danger. If they see danger they emit a piercing cry to warn other grants or those who have tamed the horse. They can only be found in very dense forests and are incredibly timid creatures. They weigh 250 to 300 stones and stand 40 to 50 stones tall."
  }, {
    name: "Gobriks",
    weight: 30,
    height: 30,
    health: 15,
    damage: 2,
    symbol: "r",
    description: "Gobriks are 30 to 36 stones tall. Gobriks are incredibly grotesque creatures that almost inhibit qualities of phantoms. They originate from the bleak as degenerate offspring of inbreeding goblin slaves of the Dark Queen. The Dark Queen mocks the surface races and Gobriks are a result of her hatred of the so-called sky civilizations. Gobriks weigh around 30 stones."
  }, {
    name: "Golem",
    weight: 8000,
    height: 120,
    health: 100,
    damage: 20,
    symbol: "G",
    description: "Golems are elemental embodiments of their giant predecessors. It's said that golems were created accidentally by mages during the War of Souls. It's also said that if the Everspark were ever to be put back together, Golems would walk the surface again as their giants once had. Today Golems reside within the Bleak wander aimlessly without purpose."
  }, {
    name: "Griffin",
    weight: 200,
    height: 90,
    health: 30,
    damage: 6,
    symbol: "g",
    description: "Griffins have the body of a lion with the wings and head of an eagle. Griffins represent royalty and are often seen on coat of arms of various households. Griffins are thought extinct, having happened during the War of Souls. They were half the size of the Roc weighing 250 stones with a wingspan of 90 to 220 stones."
  }, {
    name: "Harpy",
    weight: 125,
    height: 50,
    health: 15,
    damage: 4,
    symbol: "h",
    description: "Harpies are beautiful winged bird-women. They have protruding tongues and fangs and have the ability to bring life. They are also known as winged death-spirits best known for constantly stealing food. Harpies resemble woman at the height of 50 to 60 stones and 125 stones in weight."
  }, {
    name: "Hercinia",
    weight: 8,
    height: 30,
    health: 20,
    damage: 1,
    symbol: "H",
    description: "Hercinias are birds with brightly glowing feathers. They are incredibly passive and feed only on insects, attacking only when provoked or when defending their young. Hercinias are the size of bald eagles which is 30 stones tall and 4 to 8 stones in weight."
  }, {
    name: "Hydra",
    weight: 1500,
    height: 180,
    health: 90,
    damage: 20,
    symbol: "H",
    description: "Hydras are guardians within the Bleak. A Hydra generally has 9 heads with the mdidle head supposedly being immortal with poisonous venom and breath. It's very difficult to kill a hydra since cutting off a head only leads to two more growin back in it's place, at least that's the rumor. They stand 120 to 180 stones tall and weigh approximately 800 to 1500 stones."
  }, {
    name: "Incubus",
    weight: 175,
    height: 60,
    health: 80,
    damage: 6,
    symbol: "I",
    description: "Incubai are lewd male creatures that take on the illusory appearance of a male human being and seeks sexual intercourse with women, usually while they're asleep. The incubai is believed to be a celestial creature who fell from the grace of Ettphemone because of his insatiable lust for women. Incubai like succubai innately shadowstep. An incubai weighs 175 stones and stand 60 stones tall."
  }, {
    name: "Ifrit",
    weight: 800,
    height: 80,
    health: 80,
    damage: 19,
    symbol: "F",
    description: "Ifrits are elemental giants of fire. Ifrits are generally created by Archmages to protect portals, but there have been known to be a few Myrmidons to have been capable of summoning these horrifying beasts within the battlefield. Ifrits weigh 800 stones and stand 80 to 100 stones tall."
  }, {
    name: "Imp",
    weight: 30,
    height: 30,
    health: 10,
    damage: 1,
    symbol: "i",
    description: "Imps are 10 stones tall and resemble goblins except for their  thin bodies and addition of wings. Imps aren't generally able to use their wings other than to flutter or glide from high places to ground safely. Imps weigh most generally between 30 to 50 stones."
  }, {
    name: "Kampe",
    weight: 500,
    height: 120,
    health: 70,
    damage: 14,
    symbol: "P",
    description: "Kampes are monstrous centaurine creatures who are have woman with serpentine hair and below the waist they have the scaly dragon features with a thousand vipers for feet. Sprouting from a Kampes waist are said to be the heads of fifty fearsom beasts such as lions, boars, and other wild animals. Kampes also have dark wings and a raised scorpions tail. Kampe were said to be guardians of the cyclops that worked their way into the underground caverns of the Bleak, thus Kampes may be found within the bleak - though now mostly guarding treasures and lost lore. Kampe weigh 500 to 800 stones and stand 120 to 130 stones tall."
  }, {
    name: "Krakkan",
    weight: 15000,
    height: 8000,
    health: 100,
    damage: 20,
    symbol: "K",
    description: "Krakkan are considered a myth by seafarers of ages old. The myth is that there is a being that greatly resembles a colossal octopus living within the deep waters east of Crecia. Krakkan would have span 1800 stones in height and weighed 15000 or more incomprehensible stones."
  }, {
    name: "Leucrota",
    weight: 60,
    height: 30,
    health: 30,
    damage: 2,
    symbol: "L",
    description: "Leucrota are dog-like beasts with a mouths that stretch ear-to-ear and plenty long teeth to boot. These scary looking creatures are said to shadowstep miles at a time and stalk easily prey, waiting until it sleeps to quickly bit it's head off. It's mentioned in some stories that the Leucrota could fit easily a horses head in it's mouth, so it is that this is the favored way of the leucrota to dispatch it's pray, quickly chomping down and through their neck. Some say the Leucrota swallows the heads whole and doesn't eat the body whatsoever. Leucrota weigh 60 stones and stands 30 stones tall."
  }, {
    name: "Llamhigyn Y Dwr",
    weight: 120,
    height: 30,
    health: 35,
    damage: 4,
    symbol: "L",
    description: "Llamhigyn Y Dwrs are creatures that dwell in ponds, swamps, and lakes. They are amphibious, having the limbless body of a frogg, a long lizard tail, and membrane wings resembling those of a bat. It uses it's wings to leap out of the water and glide forth and swims very much like a tadpole using it's lizard tail. Llamhigyn Y Dwrs are carnivorous, making it a pest among fisherman communities. It can cause trouble by snapping fishing lines, eating livestock, and sometimes even attacking humans when food is sparce. Llamhigyn Y Dwrs weigh approximately 120 stones and stand 30 stones tall."
  }, {
    name: "Manticore",
    weight: 350,
    height: 40,
    health: 30,
    damage: 8,
    symbol: "M",
    description: "Manticores are creatures with a humans face, lions body, and the stinger of scorpion. Manticores are said to swallow men whole and digest them as if they were snakes, using their teeth only as weapons in case of defense. Manticores are agressive creatures that don't do well in groups and prefer to hunt alone, stalking their prey, by which generally consists of travelers. Manticores weigh 350 stones and stand 30 to 40 stones tall."
  }, {
    name: "Marid",
    weight: 500,
    height: 80,
    health: 15,
    damage: 12,
    symbol: "m",
    description: "Marids are powerful giant elementals of water conjured by strong Archmages or the occasional Myrmidon during battle. Marids tear through enemies quickly with their magical and physical attacks. Marids weigh 300 to 500 stones and stand 80 to 100 stones tall."
  }, {
    name: "Minotaur",
    weight: 180,
    height: 80,
    health: 30,
    damage: 6,
    symbol: "m",
    description: "Minotaurs are creatures with the lower half of a man and the top half of a bull. They have cannabilitic hunger for mainly small children, young women, and are immune to fear which makes them incredibly fearsome. Though they are fearsom creatures, they are also quite unintelligent. They stand the height of a man and weigh no more than 180 stones."
  }, {
    name: "Monocerus",
    weight: 60,
    height: 30,
    health: 35,
    damage: 3,
    symbol: "o",
    description: "Monocerus' are dog-like beasts with a long horns in their forehead, almost more than bucks than dogs. Monocerus, though another way to describe a unicorn, doesn't resemble the unicorn in any aspect, and feasts off of the dead as a scavenger. Their fur is quite similar to a heiyina, shaggy and unclean - much like their temperament. Monocerus' weigh 60 some stones and stand 30 stones tall."
  }, {
    name: "Muldjeqangk",
    weight: 190,
    height: 30,
    health: 20,
    damage: 5,
    symbol: "j",
    description: "Muldjewangk are lake monsters only visible at night when they glow slightly. These creatures are enormous toads that remain most generally within water of the pond, swamp, or perhaps bog, lighting the area. Muldjewangk surprisingly though they glow, are in fact blind. These creatures sense heartbeats and are incredibly timid with the ability to swim and run incredibly fast. Obviously their only downfall is the inability to sense the undead, as thus they have been destroyed in most regions of the Mellowdeep Marsh. Muldjewangk weigh 190 stones and stand 30 stones tall."
  }, {
    name: "Muscaliet",
    weight: 5,
    height: 3,
    health: 5,
    damage: 1,
    symbol: "m",
    description: "Muscaliets are creatures with the body of a hare, tail of a squirrel, and teeth of a boar. These creatures are incredibly timid and hide most times of the day within tufts of grass, eating only the grass and flowers that inhabit the eastern cost of Sedia. These creatures weigh no more than 5 stones and stand 2 to 3 stones tall."
  }, {
    name: "Myrmecoleon",
    weight: 200,
    height: 80,
    health: 30,
    damage: 10,
    symbol: "y",
    description: "Myrmecoleons are huge ants that supposedly kills other ants and small animals. These ants are incredibly dangerous to any creature whatsoever in large swarms, and inhabit the Bleak. They weigh 2 stones each, standing 1 stone tall they generally live in swarms of a few thousand, up to as much as 10 to 20 thousand which if focused could easily destroy any city within Sedia."
  }, {
    name: "Nymph",
    weight: 30,
    height: 50,
    health: 10,
    damage: 2,
    symbol: "n",
    description: "Nymphs are said to be natural entities of nature, spirits of the woods. They take the appearance of young, beautiful girls. They are not immortal however, though they are long-lived, and their lives end with the death of a particular natural object, such as a tree, to which they are attached. Nymphs personify the fertility and creative powers of nature. Nymphs are the size of a woman, with similar weight and distinguishable features. Nymphs are rare and may be found in mostly woodland areas."
  }, {
    name: "Ogre",
    weight: 400,
    height: 100,
    health: 25,
    damage: 11,
    symbol: "o",
    description: "Ogres are large giants whose mind was tainted by the evil of Dekkashraen. Ogres stand up to 100 stones tall and weigh 300 to 400 stones. Ogres use primitive weapons and live in destructive nuclear families."
  }, {
    name: "Onocentaur",
    weight: 200,
    height: 40,
    health: 15,
    damage: 5,
    symbol: "o",
    description: "Onocentaurs are creatures with the upper body of man and lower of an ass. Onocentaurs have violent tempers and do not endure in capture, ramming themselves into walls until they die. Onocentaurs weigh up to 200 stones and stand 30 to 40 stones tall."
  }, {
    name: "Parandrus",
    weight: 150,
    height: 30,
    health: 30,
    damage: 4,
    symbol: "o",
    description: "Parandrus are beasts that can conceal itself by changing their appearance to camoflauge themselves in their surrounding environment. They are said to be ox-sized, long-haired, with antlers and cloven hooves. These creatures weigh generally 150 stones and stand 30 to 40 stones tall."
  }, {
    name: "Pegasus",
    weight: 80,
    height: 80,
    health: 80,
    damage: 5,
    symbol: "O",
    description: "Pegasus' are white winged horses that live in small herds in forest areas. There is very rarely just one pegasus in the same area. It's also very rare for a pegasus to befriend a human as humans are known to temper horses, something a pegasus is very well aware of due to their intelligence. Their height and weight quotients are directly comparable to that of a standard horse plus an 80 stone wingspan."
  }, {
    name: "Perytons",
    weight: 80,
    height: 30,
    health: 15,
    damage: 3,
    symbol: "y",
    description: "Perytons are herbivore stags with black antlers and horns, rows of sharp teeth, golden fur, and feathered wings and hindquarters. They may vary in different colors such as black, gray, brown, gold, white, and very rarely a blue, green, scarlet, red, or orange. They are considered to be vicious because of their wild behavior and seclusion from civilization, but it's possible to approach them with slow movement without causing hostility. Their weight and height are quite comparable to that of a standard buck or doe."
  }, {
    name: "Phoenix",
    weight: 80,
    height: 30,
    health: 30,
    damage: 3,
    symbol: "h",
    description: "Phoenix's are sacred firebirds found in colder climates as their internal fire makes them too hot to live in any other climate. They have both red and gold plumage. It's said that at the end of their life-cycle, which is about 500 years, the phoenix builds itself a nest of cinnamon twigs that it then ignites; both nest and bird burn fiercely and are reduced to ashes, by which a new, young phoenix arises. The phoenix is a bird of prey commonly diving into the cold waters of the arctic to get their food which consists mostly of fish, krill, baby mammals, and eaven ears of adult bears. A phoenix typically weighs 80 stones and stands 30 to 40 stones tall with an immense wingspan."
  }, {
    name: "Quanlier",
    weight: 30,
    height: 30,
    health: 10,
    damage: 1,
    symbol: "M",
    description: "Quanliers are creatures with the head of a wolf, the torso of a man, the arms of a dog, and the legs of a jackal. It feeds on human flesh and most small animals. It's said that they can run incredibly fast, so much so that they can trek leagues in seconds. A quanliers weight and height resembles that of a standard wolf."
  }, {
    name: "Roc",
    weight: 500,
    height: 240,
    health: 50,
    damage: 16,
    symbol: "R",
    description: "A large bird of prey, about twice the size of a bald eagle, is often depicted as white and is reputed to have been able to carry off and eat elephants. It's a very rare bird that might very well be extinct. Rocs are 500 stones and stand 180 to 240 stones tall."
  }, {
    name: "Satyr",
    weight: 60,
    height: 50,
    health: 30,
    damage: 3,
    symbol: "S",
    description: "Satyrs are a troop of male companions who have a human torso, goat legs, a goat tail, pointed ears, horns, curly hair, and full beards. Described as roguish but faint-hearted folk they are also quite subversive and dangerous. They are lovers of wine and women by which they steal from caravans or small towns to do unspeakable things to as slaves. Satyrs weigh 60 stones and stand 40 to 55 stones tall."
  }, {
    name: "Scarab",
    weight: 30,
    height: 10,
    health: 5,
    damage: 1,
    symbol: "s",
    description: "Scarabs are very large beetles that burrow within the flesh of large or colossal creatures, much like a parasite. These creatures could be compared easily to ticks. Scarabs weigh 20 to 30 stones and stand 10 stones tall."
  }, {
    name: "Sceadugenga",
    weight: 150,
    height: 50,
    health: 80,
    damage: 6,
    symbol: "G",
    description: "Sceadugenga are said to neither be alive or dead and can shapeshift, which is generally incorrect as they are clearly alive and merely shadowwalk constantly. Sceadugenga resemble panthers and humans alike, or perhaps humans with panther features. They certainly have tails by which they use for balance when running fast. Sceadugenga weigh 150 stones and stand 50 to 60 stones tall."
  }, {
    name: "Schilla",
    weight: 80,
    height: 80,
    health: 50,
    damage: 4,
    symbol: "L",
    description: "Schilla are spiders with a human head that communicates telepathically. They creatures are found all throughout the Bleak, and many ruins. These creatures are said to have been the death of lizardling creatures as they inhabit most the same areas that those draconian creatures once had. It's not said why Schilla prefer these areas and it's rumored they have an ulterior motive regarding draconian magic. Schill can weigh from 30 stones to 800 stones depending on their size and likewise range from 10 stones to 100 stones in height."
  }, {
    name: "Serpent",
    weight: 300,
    height: 80,
    health: 55,
    damage: 9,
    symbol: "s",
    description: "Serpents are creatures with a snake body and human head. Serpents prefer to live in water and are rarely seen elsewhere, though they are able to move about on ground. They are not able to live within hot environments and prefer cold to cool temperatures. Serpents can weigh from 1 stone to 300 stones and range from 1 to 800 stones in length."
  }, {
    name: "Shishi",
    weight: 180,
    height: 40,
    health: 65,
    damage: 6,
    symbol: "h",
    description: "Shishi's are dogs with a lion-like mane and fur. Shishi are posted right and left of temple and house entrances as guardians against evil spirits. They can also be found on roofs but are often seen in pairs. The shishi throw their children off cliffs in order to test their strength. Despite this instance of callous disregard for their children's health, the parents are quite protective of their young. Shishi weigh 180 stones and stand 30 to 40 stones tall."
  }, {
    name: "Siren",
    weight: 150,
    height: 50,
    health: 15,
    damage: 4,
    symbol: "s",
    description: "Sirens are serpent-like creatures who ensnare creatures with their lulling songs. They inhabit areas surrounded by water. Sirens are incredibly dangerous and prey on traveling sailors. Sirens weigh most generally 150 stones and stand 50 stones tall."
  }, {
    name: "Succubus",
    weight: 125,
    height: 55,
    health: 15,
    damage: 4,
    symbol: "c",
    description: "Succubai are beautiful and desirable women, unlike their male counterparts, Incubai. Though they sometimes have bat-like wings or other scary feaures like horns, tails, hooves, or fangs - they represent lust. Succubi appear to men in the night and seduce them into sexual encounters so they can bear children. Celibate monks seemed to be especially prone to such attacks, often blaming Succubai for their lustful thoughts or sexual dreams. Succubai could suck the life force of men, leaving them exhausted or even killing them. Seccubai innately shadowstep. Succubai weigh 125 to 130 stones and stand 55 stones tall."
  }, {
    name: "Svagin",
    weight: 3,
    height: 80,
    health: 80,
    damage: 3,
    symbol: "V",
    description: "Svagin are large swarms of bloodsucking insects. Svagin can range incredibly in size from 3 stones diameter to leagues of what might be considered a plague. Svagin are incredibly dangerous."
  }, {
    name: "Tarasque",
    weight: 400,
    height: 80,
    health: 80,
    damage: 11,
    symbol: "T",
    description: "Tarasques are menacing beasts that cause much devastation to landscape. The tarasque is a sort of dragon with six short legs like a bear's, an ox-like body covered with a turtle shell, and a scaly tail that ended in a scorpions stinger and lion's head. Tarasques weigh 400 stones and stand 80 stones tall."
  }, {
    name: "Thunderbird",
    weight: 3000,
    height: 330,
    health: 70,
    damage: 20,
    symbol: "t",
    description: "Thunderbirds are supernatural birds that beat their enormous wings causing thunder and stirring the wind. They're said to be the bringers of rain and storms, large enough to hunt small whales individually. They are the predecessors of Rocs and are though extinct. Thunderbirds would have weighed 3000 stones and with a wingspan of 330 stones."
  }, {
    name: "Tikbalang",
    weight: 200,
    height: 60,
    health: 40,
    damage: 6,
    symbol: "t",
    description: "Tikbalangs are creatures that have a horse's head, body of a human, but with the feet of a horse. They travel at night and rape female sentient beings. The raped women will then give birth to more Tikbalang. They are also believed to cause travelers to lose their way particularly in mountains or forest areas. Tikbalang are very playful with people, and they usually make a person imagine things that aren't real. Sometimes a tikbalang will drive a person crazy. Legends say that when rain falls while teh sun in shining, a pair of tikbalangs are being wed. Tikbalangs stand 60 stones tall and weigh approximately 220 stones."
  }, {
    name: "Tikoloshe",
    weight: 240,
    height: 60,
    health: 30,
    damage: 7,
    symbol: "h",
    description: "Tikoloshe are bear-like humanoids considered to be mischievous spirits as they can become invisible at will by swallowing pebbles. It's head is like that of a teddy-bear, but it has a thick, sharp, boney ridge on top of it's head. Tokoloshes have a hole in their head. They're immensely strong. The ridge on their head goes from above the Tikoloshe's forehead to the back of the head, and with this ridge it can knock down an ox by running and butting it. Tikoloshes are 60 stones tall and weigh 240 stones."
  }, {
    name: "Tiyanak",
    weight: 30,
    height: 12,
    health: 80,
    damage: 2,
    symbol: "t",
    description: "Tiyanaks resemble small children except the horns and sharp teeth on their face. They are offpsring between incubai and creatures that are not mankind. Incubai rarely favor sentient beings other than humans, and the result of the rare few are Tiyanaks. Tiyanaks grow quickly within the womb and during the third trimester bore a hole through their mother, killing her. The Tiyanak lives within the dead body of the mother eating her insides for a month before it leaves the body and finds another human by which it can bore itself into. Tiyanaks weigh 30 stones and stand no more than 10 to 12 stones tall."
  }, {
    name: "Tlatecuhtli",
    weight: 3,
    height: 1,
    health: 1,
    damage: 1,
    symbol: "l",
    description: "Tlatecuhtli are huge frogs that are strongly used as examples of mage spire teachers for the representation of life, death, and rebirth. The Tlatecuhtli after it dies floats in the air suspended for a few minutes before it falls back to the ground renewed as a new creature. Tlatecuhtli are incredibly timid. They weigh 1 stone and stand 1 stone tall."
  }, {
    name: "Unicorn",
    weight: 400,
    height: 50,
    health: 50,
    damage: 10,
    symbol: "u",
    description: "Unicorns are beautiful large horses with spiral horns growing out of their forehead. The horn and the unicorns blood are used in medicine due to their healing properties. The horn is also known as the 'Bane of Evil' in that it has the ability to dispel anything malignant in water and can also kill most truely evil creatures it comes in contact with. Unicorns stand 50 stones tall and weigh 400 stones."
  }, {
    name: "Undines",
    weight: 160,
    height: 60,
    health: 75,
    damage: 6,
    symbol: "U",
    description: "Undines are sea faries who appear as seahorses with human faces. It's said that undines lack souls which constitutes for the forelorn looks and intense passiveness. They weigh 160 stones and span 60 stones tall."
  }, {
    name: "Wendigo",
    weight: 150,
    height: 50,
    health: 30,
    damage: 5,
    symbol: "w",
    description: "Wendigos are considered cannabilistic spirits having some similar characteristics between a zombie and a being that lives on blood. It's believed that humans can change into wendigos when they indulge in cannabalism. In some cases, possession causes the transformation, while some say that being bitten by a Wendigo can also cause it. Whil hunting, the wendigo follows its prey, always just out of sight, until it gets a chance to pounce. As for appearnace it is quite often describe as a tall thin humanoid creature, sometimes said to be twisted, bloodstained or fanged. Wendigos weigh 150 to 200 stones and stand 50 to 60 stones."
  }, {
    name: "Will'o'Wisp",
    weight: 60,
    height: 6,
    health: 30,
    damage: 2,
    symbol: "w",
    description: "Will'o'Wisps are also known as fairy lights, they're a debatable phenomenon. Humans who follow them can be lead to a fairy gather it's said, or even to a fairy realm if they manage to do so without getting lost; as the strange lights have a tendency to flicker and fade in and out of sight. Will'o'Wisps exists, though fairies do not, and are in fact quite mischievous creatures that inhibit many magical properties, probably a side affect of the War of Souls. Will'o'Wisps weigh nothing, but are seemingly ethereal and can only be touched by magic. They span from 6 stones to 60 stones in width."
  }, {
    name: "Wyvern",
    weight: 300000,
    height: 30000,
    health: 100,
    damage: 20,
    symbol: "W",
    description: "Wyverns are colossal, ancient, dragons who have aged so much they lost theirs wings and tails have enlarged. They look more-or-less like Worms, incredibly large ones at that. They sometimes burrow within the ground as the Plains of Endless Despair can be quite ridden with magical properties that are incredibly dangerous. They protect the drakes that sour about the area of the Plains of Endles Despair as if they were their own children. Wyverns can talk telepathically."
  }, {
    name: "Xolotl",
    weight: 80,
    height: 30,
    health: 20,
    damage: 3,
    symbol: "x",
    description: "Xolotl are horrible underworld dogs whose legs and feet are backwards. It's ears can swivel in any direction. Every evening it's said that xolotls travel secret passageways up to the surface to catch and drag down its prey and feast in packs upon the flesh of an innocent lone traveler. Xolotls weigh 50 to 80 stones and stand 30 stones tall."
  }, {
    name: "Yale",
    weight: 250,
    height: 30,
    health: 15,
    damage: 6,
    symbol: "y",
    description: "Yales are beasts with flexible horns that they can move at will. They resemble most generally bucks, or deer as it were. Yale are passive magical creatures that prefer to be left alone. They stand 30 to 40 stones tall and weigh 150 to 250 stones."
  }, {
    name: "Yara-ma-yha-who",
    weight: 2,
    height: 2,
    health: 10,
    damage: 1,
    symbol: "y",
    description: "Yara-ma-yha-who are little red men who have large teethless heads and suckers for hands and feet. They stand no more than 2 stones tall and weigh 1 to 2 stones. They are thieves and hunger for blood - or more particularly blood of magical creatures. They are found most generally wherever you can find other magical creatures."
  }, {
    name: "Yeti",
    weight: 300,
    height: 80,
    health: 80,
    damage: 9,
    symbol: "Y",
    description: "Yetis are ape-like beasts that reside in the cold mountainous regions of the Northern Reach. These creatures are mostly passive creatures though they will eat anything and everything when they are starved, including humans and other Yetis. They stand 80 stones tall and can weigh from 300 to 500 stones depending on when they last ate."
  }, {
    name: "Ziz",
    weight: 1300,
    height: 40,
    health: 100,
    damage: 20,
    symbol: "z",
    description: "Ziz are enormous griffin-like bird creatures. They can have a wingspan so wide it blocks out the sun from miles above, though they themselves aren't so big.  Ziz are good hearted creatures who where used to protect livestock in ages old from other creatures. Ziz are now extinct since the War of Souls but stood 40 stones tall and weighed 1300 stones."
  }];
  Database.creatures = creatures; //link creatures to the Database
})(Database || (Database = {}));
var Database;
(function (Database) {})(Database || (Database || {}));
/*
 *     .---.   ___.-.  .--.    ___ .-.     .---.  
 *   / .-, \ (   )   \/    \  (   )   \   / .-, \ 
 *  (__) ; |  | ' .-. ; .-. ;  |  .-. .  (__) ; | 
 *    .'`  |  |  / (___)| | |  | |  | |    .'`  | 
 *   / .'| |  | |    |  |/  |  | |  | |   / .'| | 
 *  | /  | |  | |    |  ' .'   | |  | |  | /  | | 
 *  ; |  ; |  | |    |  .'.-.  | |  | |  ; |  ; | 
 *  ' `-'  |  | |    '  `-' /  | |  | |  ' `-'  | 
 *  `.__.'_. (___)    `.__.'  (___)(___) `.__.'_. 
 * February 11th, 2015 by Nathaniel Inman
 *
 * Meant to test abilities using Plains of Sedia and
 * Exploring The Bleak data.
 **********************************/

// JSHint Linting supplications
var ctx = ctx || function () {};
var v = v || {
  w: 0,
  h: 0
};
var r = r || function () {};
var Ion = Ion || function () {};
var outputCache = [];
var fontHeight = 16;
var heightOffset = 0;
ctx.font = fontHeight + "px Courier New";
ctx.textAlign = "center";

/**
 * The main application function
 *
 * @type {VOID} Function returns no value
 */
function app() {
  "use strict";

  //Setup the two creatures that will attack each other
  var c1 = new Database.Creature();
  var c2 = new Database.Creature();
  tick(c1, c2);
  printCreatures(c1, c2); //begin updating of the view
} //end app()
/* Modernizr 2.8.3 (Custom Build) | MIT & BSD
 * Build: http://modernizr.com/download/#-borderradius-csstransitions-canvas-testprop-testallprops-domprefixes
 */
;window.Modernizr=function(a,b,c){function w(a){i.cssText=a}function x(a,b){return w(prefixes.join(a+";")+(b||""))}function y(a,b){return typeof a===b}function z(a,b){return!!~(""+a).indexOf(b)}function A(a,b){for(var d in a){var e=a[d];if(!z(e,"-")&&i[e]!==c)return b=="pfx"?e:!0}return!1}function B(a,b,d){for(var e in a){var f=b[a[e]];if(f!==c)return d===!1?a[e]:y(f,"function")?f.bind(d||b):f}return!1}function C(a,b,c){var d=a.charAt(0).toUpperCase()+a.slice(1),e=(a+" "+m.join(d+" ")+d).split(" ");return y(b,"string")||y(b,"undefined")?A(e,b):(e=(a+" "+n.join(d+" ")+d).split(" "),B(e,b,c))}var d="2.8.3",e={},f=b.documentElement,g="modernizr",h=b.createElement(g),i=h.style,j,k={}.toString,l="Webkit Moz O ms",m=l.split(" "),n=l.toLowerCase().split(" "),o={},p={},q={},r=[],s=r.slice,t,u={}.hasOwnProperty,v;!y(u,"undefined")&&!y(u.call,"undefined")?v=function(a,b){return u.call(a,b)}:v=function(a,b){return b in a&&y(a.constructor.prototype[b],"undefined")},Function.prototype.bind||(Function.prototype.bind=function(b){var c=this;if(typeof c!="function")throw new TypeError;var d=s.call(arguments,1),e=function(){if(this instanceof e){var a=function(){};a.prototype=c.prototype;var f=new a,g=c.apply(f,d.concat(s.call(arguments)));return Object(g)===g?g:f}return c.apply(b,d.concat(s.call(arguments)))};return e}),o.canvas=function(){var a=b.createElement("canvas");return!!a.getContext&&!!a.getContext("2d")},o.borderradius=function(){return C("borderRadius")},o.csstransitions=function(){return C("transition")};for(var D in o)v(o,D)&&(t=D.toLowerCase(),e[t]=o[D](),r.push((e[t]?"":"no-")+t));return e.addTest=function(a,b){if(typeof a=="object")for(var d in a)v(a,d)&&e.addTest(d,a[d]);else{a=a.toLowerCase();if(e[a]!==c)return e;b=typeof b=="function"?b():b,typeof enableClasses!="undefined"&&enableClasses&&(f.className+=" "+(b?"":"no-")+a),e[a]=b}return e},w(""),h=j=null,e._version=d,e._domPrefixes=n,e._cssomPrefixes=m,e.testProp=function(a){return A([a])},e.testAllProps=C,e}(this,this.document);
/**
 * prettyPrint is a function that giving text and a location to print it will abstract colors
 * out of it and print it to the screen
 * 
 * @param  {String} text The string of text that needs to be displayed to the screen pretty printed
 * @return {VOID}   prettyPrint returns no value
 */
function prettyPrint(text, x, y) {
  if (typeof text == "object") text = text.join();
  for (var i = 0; i <= text.length; ++i) {
    ch = text.charAt(i);
    if (i < text.length - 3 && ch == "|" && text.charAt(i + 1) == "R" && text.charAt(i + 2) == "|") {
      ctx.fillStyle = "#F00";
      ch = text.charAt(i + 3);i += 3;
    } else if (i < text.length - 3 && ch == "|" && text.charAt(i + 1) == "r" && text.charAt(i + 2) == "|") {
      ctx.fillStyle = "#800";
      ch = text.charAt(i + 3);i += 3;
    } else if (i < text.length - 3 && ch == "|" && text.charAt(i + 1) == "G" && text.charAt(i + 2) == "|") {
      ctx.fillStyle = "#0F0";
      ch = text.charAt(i + 3);i += 3;
    } else if (i < text.length - 3 && ch == "|" && text.charAt(i + 1) == "g" && text.charAt(i + 2) == "|") {
      ctx.fillStyle = "#080";
      ch = text.charAt(i + 3);i += 3;
    } else if (i < text.length - 3 && ch == "|" && text.charAt(i + 1) == "C" && text.charAt(i + 2) == "|") {
      ctx.fillStyle = "#0FF";
      ch = text.charAt(i + 3);i += 3;
    } else if (i < text.length - 3 && ch == "|" && text.charAt(i + 1) == "c" && text.charAt(i + 2) == "|") {
      ctx.fillStyle = "#088";
      ch = text.charAt(i + 3);i += 3;
    } else if (i < text.length - 3 && ch == "|" && text.charAt(i + 1) == "B" && text.charAt(i + 2) == "|") {
      ctx.fillStyle = "#00F";
      ch = text.charAt(i + 3);i += 3;
    } else if (i < text.length - 3 && ch == "|" && text.charAt(i + 1) == "b" && text.charAt(i + 2) == "|") {
      ctx.fillStyle = "#008";
      ch = text.charAt(i + 3);i += 3;
    } else if (i < text.length - 3 && ch == "|" && text.charAt(i + 1) == "M" && text.charAt(i + 2) == "|") {
      ctx.fillStyle = "#F0F";
      ch = text.charAt(i + 3);i += 3;
    } else if (i < text.length - 3 && ch == "|" && text.charAt(i + 1) == "m" && text.charAt(i + 2) == "|") {
      ctx.fillStyle = "#808";
      ch = text.charAt(i + 3);i += 3;
    } else if (i < text.length - 3 && ch == "|" && text.charAt(i + 1) == "Y" && text.charAt(i + 2) == "|") {
      ctx.fillStyle = "#FF0";
      ch = text.charAt(i + 3);i += 3;
    } else if (i < text.length - 3 && ch == "|" && text.charAt(i + 1) == "y" && text.charAt(i + 2) == "|") {
      ctx.fillStyle = "#880";
      ch = text.charAt(i + 3);i += 3;
    } else if (i < text.length - 3 && ch == "|" && text.charAt(i + 1) == "X" && text.charAt(i + 2) == "|") {
      ctx.fillStyle = "#FFF";
      ch = text.charAt(i + 3);i += 3;
    } else if (i < text.length - 3 && ch == "|" && text.charAt(i + 1) == "x" && text.charAt(i + 2) == "|") {
      ctx.fillStyle = "#333";
      ch = text.charAt(i + 3);i += 3;
    } else if (i < text.length - 3 && ch == "|" && text.charAt(i + 1) == "W" && text.charAt(i + 2) == "|") {
      ctx.fillStyle = "#AAA";
      ch = text.charAt(i + 3);i += 3;
    } else if (i < text.length - 3 && ch == "|" && text.charAt(i + 1) == "w" && text.charAt(i + 2) == "|") {
      ctx.fillStyle = "#777";
      ch = text.charAt(i + 3);i += 3;
    } else if (i < text.length - 3 && ch == "|" && text.charAt(i + 1) == "x" && text.charAt(i + 2) == "|") {
      ctx.fillStyle = "#333";
      ch = text.charAt(i + 3);i += 3;
    }
    ctx.fillText(ch, x, y);
    x += ctx.measureText(ch).width;
  }
  ctx.fillStyle = "#FFF";
}
/**
 * The printCreatures function is a utility function that prints the creatures
 *
 * @return {VOID} the printCreatures function returns no value
 */
function printCreatures(c1, c2) {
  "use strict";

  // Variable Initialization and Dimensioning
  ctx.fillStyle = "#000";
  ctx.fillRect(0, 0, v.w, v.h);
  var top = 100;
  var left = 100;
  var right = v.w - left;

  // Display center messaging if there are any messages in the cache
  for (var i = 0, j = 0; i < outputCache.length; i++) {
    if (outputCache[i] instanceof Array) {
      for (var k = 0; k < outputCache[i].length; k++) {
        prettyPrint(outputCache[i][k], fontHeight, 10 + fontHeight + fontHeight * i + fontHeight * j - heightOffset);
        j++;
      } //end for
      j--;
    } else {
      prettyPrint(outputCache[i], fontHeight, 10 + fontHeight + fontHeight * i + fontHeight * j - heightOffset);
    }
  } //end for
  if (10 + fontHeight + fontHeight * i + fontHeight * j - heightOffset > v.h / 2) heightOffset += fontHeight;

  ctx.fillStyle = "#333";
  ctx.fillRect(v.w / 4 * 3, 0, 10, v.h); //vertical separator
  ctx.fillRect(v.w / 4 * 3, v.h / 2, v.w / 4, 10); //horizontal separator
  // Display Creature One
  ctx.fillStyle = "#400";
  ctx.fillRect(v.w / 4 * 3 + 10, fontHeight + 10, v.w / 4, fontHeight);
  ctx.fillRect(v.w / 4 * 3 + 10, fontHeight + 20 + v.h / 2, v.w / 4, fontHeight);
  ctx.fillStyle = "#F00";
  ctx.fillRect(v.w / 4 * 3 + 10, fontHeight + 10, v.w / 4 / c1.healthMax * (c1.health < 0 ? 0 : c1.health), fontHeight);
  ctx.fillRect(v.w / 4 * 3 + 10, fontHeight + 20 + v.h / 2, v.w / 4 / c2.healthMax * (c2.health < 0 ? 0 : c2.health), fontHeight);
  ctx.fillStyle = "#FFF";

  ctx.fillText(c1.name, v.w - v.w / 8, fontHeight);

  prettyPrint("|w|Weight|C|: |W|" + c1.weight, v.w - v.w / 4 + 20, 10 + fontHeight * 3);
  prettyPrint("|w|Height|C|: |W|" + c1.height, v.w - v.w / 4 + 20, 10 + fontHeight * 4);
  prettyPrint("|w|Health|C|: |W|" + c1.health + "/" + c1.healthMax, v.w - v.w / 4 + 20, 10 + fontHeight * 5);
  prettyPrint("|w|Damage|C|: |W|" + c1.damage, v.w - v.w / 4 + 20, 10 + fontHeight * 6);
  prettyPrint("|w|Symbol|C|: |W|" + c1.symbol, v.w - v.w / 4 + 20, 10 + fontHeight * 7);

  // Display Creature Two
  ctx.fillText(c2.name, v.w - v.w / 8, v.h / 2 + 10 + fontHeight);
  prettyPrint("|w|Weight|C|: |W|" + c2.weight, v.w - v.w / 4 + 20, 20 + v.h / 2 + fontHeight * 3);
  prettyPrint("|w|Height|C|: |W|" + c2.height, v.w - v.w / 4 + 20, 20 + v.h / 2 + fontHeight * 4);
  prettyPrint("|w|Health|C|: |W|" + c2.health + "/" + c2.healthMax, v.w - v.w / 4 + 20, 20 + v.h / 2 + fontHeight * 5);
  prettyPrint("|w|Damage|C|: |W|" + c2.damage, v.w - v.w / 4 + 20, 20 + v.h / 2 + fontHeight * 6);
  prettyPrint("|w|Symbol|C|: |W|" + c2.symbol, v.w - v.w / 4 + 20, 20 + v.h / 2 + fontHeight * 7);
  setTimeout(function () {
    printCreatures(c1, c2);
  }, 500);
} //end printCreatures()
var Database;
/*
Elementalist  Nihilist  Sorcerer  Arcanist  Myrmidon 
  The class starts as elementalist, nihilist, sorcerer, arcanist, and eventually becomes a Myrmidon. Myrmidons are reflexive casters adept in warfare who relish the power and naturally carry their abilities into the battlefield with almost a nonchalant manner. Myrmidons may speak a number of languages innately, unknowingly perhaps, and are quit adept at counter spelling mages or necromancer's natural elements. A Myrmidon may only have one type of shield on at a time. They also may immolate only one kind at a time. They may cast any element spell under any kind of shield or immolation. If they, however, cast a fire spell under a fire shield, that spell is amplified by 10 in damage. Any element that is received, as an example under the fire shield will be reduced by 10 damage save for fire in which damage would be thenceforth amplified by 10 damage. Outgoing magic of non-fire elements are not diminished in power when under the fire shield. This works for all elements respectfully. Elemental Specification stacks with the damage amplified and diminished by the shields. Saturation deducts all amplification of incoming spells when under effect of a shield. Elemental Allocation completely bypasses all incoming amplifications of shields and moves the elemental type into the type with most resistance. The most efficient races for the Myrmidon are Human, Dwarf, Goblin, Troll, Half-Orc, and the most common race: Orc.


  "Proficiencies"
Hand-to-hand    Allows combat when unarmed.
Wands     Allows usage of magical wands.
Light Armor   Allows light armor to be worn efficiently as equipment
Medium Armor    Allows medium armor to be worn efficiently as equipment
Heavy Armor   Allows heavy armor to be worn efficiently as equipment
All Slashing    Allows combat with all slashing weapons.
Basic Piercing    Allows combat with basic piercing weapons.
Common    Language proficiency.
Celestial   Language proficiency.
Infernal    Language proficiency.
Arcanic   Language proficiency.
  "Immolation"
0 50RSP Immolate Fire A Sphere of fire engulfs player causes 1d20 damage to enemy on contact
20  50RSP Immolate Ice  A Sphere of Magical ice engulfs player causing 1d20 damage to enemy on contact
40  50RSP Immolate Sparks A Sphere of Magical electricity engulfs player causing 1d20 damage to enemy on contact
60  50RSP Immolate Pulses A Sphere of Earth-elemental energy courses around player causing 1d20 damage on contact
80  50RSP Immolate Darkness A Sphere of Necromantic energy courses around player causing 1d20 damage on contact
100 Passive Elemental Precision Allows all immolations to apply dots on contact to attacking target causing 1d4/Rnd.
  "Viceration"
0 5SP Vicerating Fire Target becomes -10 resistant to fire and takes little damage, stacks 5 times.
10  5SP Vicerating Ice  Target becomes -10 resistant to ice and takes little damage, stacks 5 times.
20  5SP Vicerating Lightning  Target becomes -10 resistant to air and takes little damage, stacks 5 times.
30  5SP Vicerating Pulse  Target becomes -10 resistant to earth and takes little damage, stacks 5 times.
40  5SP Vicerating Darkness Target becomes -10 resistant to poison and takes little damage, stacks 5 times.
50  Passive Elemental Amplitude Dots deal 10 more damage/Rnd.
  "Elements"
0 25WP  Fireball  1d16+Int Mod fire elemental damage
10  30WP  Frostcone 3d8+Int Mod ice elemental damage
20  40WP  Lightning Ball  2d20+Int Mod air elemental damage
30  20WP  Earthquake  1d4+Int Mod earth elemental damage up to 4 enemies
40  30WP  Plague  1d8+Int Mod poison elemental damage transmutable disease
50  Passive Elemental Specification Forces Myrmidons to choose an element by which to specialize in, x2 Def, x2 attack.
  "Shields"
45  10RWP Fire Shield Gives a 10% chance to ignore fire elemental attack, or -10 Dmg
46  10RWP Ice Shield  Gives a 10% chance to ignore ice elemental attack, or -10 Dmg
47  10RWP Lightning Shield  Gives a 10% chance to ignore air elemental attack, or -10 Dmg
48  10RWP Earth Shield  Gives a 10% chance to ignore earth elemental attack, or -10 Dmg
49  10RWP Poison Shield Gives a 10% chance to ignore poison elemental attack, or -10 Dmg
50  Passive Elemental Protection  Immune to current immolation if it’s also a shield, or absorbed into health if it’s a Specification
  "Mastery"
50  Passive Reflex Casting  Gives DC15 chance to allow counterspell opportunity
60  Passive Elemental Spontaneity Makes spells harder to dispel or counterspell by DC15
70  Passive Saturation  Immolated elements take some of the magic out of incoming attacks by 10 Dmg
80  Passive Simplify Energies Immolated elements enhance energies making sub-elemental attacks into elemental
90  Passive Natural Reflection  Gives DC15 chance to allow reflection of spells not successfully counterspelled
100 Passive Elemental Allocation  Allows incoming attacks to distribute amongst your most powerful resistance.
  "Presence"
50  50RWP Intimidation Presence Add Charisma mod to all damage and increases critical strike damage by current Charisma
60  50RWP Demand Presence Halts all aggro for 5 rounds or until enemies are attacked or Myrmidon attacks, in which all      affected targets exit demand.
70  50RWP Darkness Presence All abilities must beat a Charisma + 1d20 vs. Charisma + 1d20 in order to cast, else abilities still      cost, but don't activate.
80  50RWP Blood Presence  All attacking enemies within 10 yards take 1d4 damage per round, and if enemy is subject to       presence for 4 rounds, it opens a wound causing an additional 1d4 per round.
90  50RWP Infectious Presence All attacking enemies within 10 yards take 1d4 damage per round, and 1d12 if enemy is affected      by a wound.
100 50WP  Pulse of Disease  All attacking enemies who are affected by an open wound gain plague based on the myrmidons      level. Level 1-20 gets level 1 poison, 21-40 gets level 2 poison, 41-60 : 3, 61-80 : 4, 81-100 : 5.

 */
(function (Database) {
  var SpellEffect = function (script) {
    this.script = script; //this is the script that will be ran when the effect is called.
  };
  var spell = function () {
    var t,
        result = [];
    if (this.affects) for (var i = 0; i < this.affects.length; i++) result.push(this.affects[i].script.call(this)); //call each spell affect given current context
    if (this.levelReq && this.actor.level && this.actor.level < this.levelReq) return false; //failed level requirement
    if (this.damage) {
      if (this.actor.amplitude && this.actor.amplitude[this.element] > 0) {
        this.damage += t = this.actor.amplitude[this.element];
        result.push("|Y|" + this.actor.name + " increases the potency of " + this.name + " by " + t + ".");
      } //end if
      if (this.target.resistance && this.target.resistance[this.element] > 0) {
        this.damage -= t = this.actor.resistance[this.element];
        result.push("|Y|" + this.target.name + " reflects " + t + " damage of " + this.name + ".");
      } //end if
      if (this.damage > 0) {
        this.target.health -= this.damage;
        result.push("|Y|" + this.actor.name + " casts " + this.name + " and deals |R|" + this.damage + "|Y| damage to " + this.target.name + ".");
      } else {
        result.push("|Y|" + this.actor.name + " attempts casting " + this.name + " but it has no affect on " + this.target.name + ".");
      } //end if
    } else if (this.enhancement) {
      result.push(this.enhancement.call(this));
    } //end if
    return result;
  };
  Database.spells = {};
  Database.spells.effects = {};
  var immolation = new SpellEffect(function () {
    var minDamage;
    // if this affect already exists on the target, then ensure
    // that it stacks for a maximum of 5 times
    if (this.target.affects["immolate " + this.element] && this.target.affects["immolate " + this.element].stacks < 5) {
      minDamage = this.target.affects["immolate " + this.element].stacks;
      this.target.affects["immolate " + this.element] = {
        timer: 5,
        stacks: ++this.target.affects["immolate " + this.element].stacks,
        name: "immolate " + this.element,
        script: this.actor.affects["elemental precision"] ? function (name) {
          var stacks = this.actor.affects[this.spell].stacks;
          var dmg = 10 + r(stacks, stacks * 4, 1);
          var element = this.spell.split(" ")[1];
          if (this.actor.affects["vicerating " + element]) {
            dmg += 10 * this.actor.affects["vicerating " + element].stacks;
          } //end if
          this.actor.health -= dmg;
          return "|M|The " + this.spell + " deals an extra " + dmg + " damage to " + this.actor.name + " as it surges more strongly (x" + stacks + ").";
        } : function (name) {
          var stacks = this.actor.affects[this.spell].stacks;
          var dmg = r(stacks, stacks * 4, 1);
          var element = this.spell.split(" ")[1];
          if (this.actor.affects["vicerating " + element]) {
            dmg += 10 * this.actor.affects["vicerating " + element].stacks;
          } //end if
          this.actor.health -= dmg;
          return "|M|The " + this.spell + " deals an extra " + dmg + " damage to " + this.actor.name + " as it surges more strongly (x" + stacks + ").";
        }
      };
      return this.target.name + " begins to REALLY suffer from " + this.element + " damage.";
    } else {
      //this is the first time that the affect has been applied to the target
      this.target.affects["immolate " + this.element] = {
        timer: 5,
        stacks: 1,
        script: this.actor.affects["elemental precision"] ? function () {
          var dmg = 10 + r(1, 4, 1);
          var element = this.spell.split(" ")[1];
          if (this.actor.affects["vicerating " + element]) {
            dmg += 10 * this.actor.affects["vicerating " + element].stacks;
          } //end if
          this.actor.health -= dmg;
          return "|M|The " + this.spell + " deals an extra " + dmg + " damage to " + this.actor.name + " as it surges.";
        } : function () {
          var dmg = r(1, 4, 1);
          var element = this.spell.split(" ")[1];
          if (this.actor.affects["vicerating " + element]) {
            dmg += 10 * this.actor.affects["vicerating " + element].stacks;
          } //end if
          this.actor.health -= dmg;
          return "|M|The " + this.spell + " deals an extra " + dmg + " damage to " + this.actor.name + " as it surges.";
        }
      };
      return this.target.name + " begins to suffer from " + this.element + " damage.";
    } //end if
  });
  var viceration = new SpellEffect(function () {
    var minDamage;
    // if this affect already exists on the target, then ensure
    // that it stacks for a maximum of 5 times
    if (this.target.affects["vicerating " + this.element] && this.target.affects["vicerating " + this.element].stacks < 5) {
      minDamage = this.target.affects["vicerating " + this.element].stacks;
      this.target.affects["vicerating " + this.element] = {
        timer: 3,
        stacks: ++this.target.affects["vicerating " + this.element].stacks,
        name: "vicerating " + this.element
      };
      return "|M|" + this.target.name + " becomes INCREDIBLY susceptible to " + this.element + " damage.";
    } else {
      //this is the first time that the affect has been applied to the target
      this.target.affects["vicerating " + this.element] = {
        timer: 3,
        stacks: 1
      };
      return "|M|" + this.target.name + " becomes susceptible to " + this.element + " damage.";
    } //end if
  });
  Database.spells.effects.immolation = immolation; //link immolation to the spell effects collection
  Database.spells.effects.viceration = viceration; //link viceration to the spell effects collection
  Database.spells.elementalist = {
    "immolate fire": function () {
      this.element = "fire";
      this.affects = [immolation];
      this.damage = r(1, 20, 1);
      return spell.call(this);
    },
    "immolate ice": function () {
      this.levelReq = 20;
      this.element = "water";
      this.affects = [immolation];
      this.damage = r(1, 20, 1);
      return spell.call(this);
    },
    "immolate sparks": function () {
      this.levelReq = 40;
      this.element = "air";
      this.affects = [immolation];
      this.damage = r(1, 20, 1);
      return spell.call(this);
    },
    "immolate pulses": function () {
      this.levelReq = 60;
      this.element = "earth";
      this.affects = [immolation];
      this.damage = r(1, 20, 1);
      return spell.call(this);
    },
    "immolate darkness": function () {
      this.levelReq = 80;
      this.element = "spirit";
      this.affects = [immolation];
      this.damage = r(1, 20, 1);
      return spell.call(this);
    },
    "elemental precision": function () {
      this.levelReq = 100;
      this.enhancement = function () {
        this.actor.affects["elemental precision"] = {
          timer: -1 //lasts an infinite amount of time, it's a passive
        };
        return this.actor.name + " gains elemental precision.";
      };
      return spell.call(this);
    },
    "vicerating fire": function () {
      this.element = "fire";
      this.affects = [viceration];
      return spell.call(this);
    }, //0
    "vicerating ice": function () {
      this.levelReq = 10;
      this.affects = [viceration];
      return spell.call(this);
    },
    "vicerating lightning": function () {
      this.levelReq = 20;
      this.affects = [viceration];
      return spell.call(this);
    },
    "vicerating pulse": function () {
      this.levelReq = 30;
      this.affects = [viceration];
      return spell.call(this);
    },
    "vicerating darkness": function () {
      this.levelReq = 40;
      this.affects = [viceration];
      return spell.call(this);
    },
    "elemental amplitude": function () {
      this.levelReq = 50;
      this.enhancement = function () {
        this.actor.affects["elemental amplitude"] = {
          timer: -1 //lasts an infinite amount of time, it's a passive
        };
        return this.actor.name + " gains elemental amplitude.";
      };
      return spell.call(this);
    },
    fireball: function () {
      this.element = "fire";
      this.damage = r(1, 17, 1) + Math.floor(this.actor.intelligence / 5);
      return spell.call(this);
    },
    frostcone: function () {
      this.levelReq = 10;
      this.damage = r(3, 25, 1) + Math.floor(this.actor.intelligence / 5);
      return spell.call(this);
    },
    "lightning ball": function () {
      this.levelReq = 20;
      this.damage = r(2, 41, 1) + Math.floor(this.actor.intelligence / 5);
      return spell.call(this);
    },
    earthquake: function () {
      this.levelReq = 30;
      this.damage = r(1, 5, 1) + Math.floor(this.actor.intelligence / 5);
      return spell.call(this);
    },
    plague: function () {
      this.levelReq = 40;
      this.damage = r(1, 9, 1) + Math.floor(this.actor.intelligence / 5);
      return spell.call(this);
    } /*, 
      'elemental specification': function(actor, target) {}, //50
      'fire shield': function(actor, target) {}, //45
      'ice shield': function(actor, target) {}, //46
      'lightning shield': function(actor, target) {}, //47
      'earth shield': function(actor, target) {}, //48
      'poison shield': function(actor, target) {}, //49
      'elemental protection': function(actor, target) {}, //50
      'reflex casting': function(actor, target) {}, //60
      'elemental spontaneity': function(actor, target) {}, //70
      'saturation': function(actor, target) {}, //80
      'simplify energies': function(actor, target) {}, //90
      'natural reflection': function(actor, target) {}, //100
      'elemental allocation': function(actor, target) {} //100 */
  };
})(Database || (Database = {}));
/**
 * The tick function is the main recursive function that continues until one of the
 * creatures is dead.
 *
 * @return {VOID} tick returns no value, but recurses until a creature is dead.
 */
function tick(c1, c2) {
  "use strict";

  if (r(0, 2, 1) === 0) {
    //c1 -> c2
    outputCache.push(c1["default"](c2));
    outputCache.push(c2["default"](c1));
  } else {
    //c2 -> c1
    outputCache.push(c2["default"](c1));
    outputCache.push(c1["default"](c2));
  } //end if
  if (c1.health > 0 && c2.health > 0) {
    setTimeout(function () {
      tick(c1, c2);
    }, 1000);
  } else {
    if (c1.health <= 0) {
      outputCache.push("|w|" + c1.name + " dies.");
    } else if (c2.health <= 0) {
      outputCache.push("|w|" + c2.name + " dies.");
    } //end if
  } //end if
}